import algorithms.fpp.FraysseixPachPollack;
import io.ChristianIOHandler;
import y.base.Edge;
import y.base.EdgeCursor;
import y.base.NodeCursor;
import y.layout.planar.DrawingEmbedder;
import y.layout.planar.FaceCursor;
import y.layout.planar.PlanarInformation;
import y.view.Graph2D;

/**
 * MainFrame.java
 *
 * @author michael
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        //Centering
        //this.setSize(1000, 800);
        //java.awt.Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit();
        //java.awt.Dimension screenSize = toolkit.getScreenSize();
        //int x = (screenSize.width - this.getWidth()) / 2;
        //int y = (screenSize.height - this.getHeight()) / 2;
        //this.setLocation(x, y);

        this.setExtendedState(MAXIMIZED_BOTH);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                System.exit(0);
            }
        });
    }

    /**
     * This method is called within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.view = new y.view.Graph2DView();
        this.view.setSize(330, 330);
        this.graphRealizer = new layout.GraphRealizer(this.view);
        mainPanel = new javax.swing.JPanel();
        progressBarPanel = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenu();
        blankGraphItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        treeGraphItem = new javax.swing.JMenuItem();
        connectedGraphItem = new javax.swing.JMenuItem();
        randomGraphItem = new javax.swing.JMenuItem();
        twoTreeMatchingItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        openItem = new javax.swing.JMenuItem();
        reloadItem = new javax.swing.JMenuItem();
        jSeparator12 = new javax.swing.JPopupMenu.Separator();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        exportMenu = new javax.swing.JMenu();
        importMenu = new javax.swing.JMenu();
        jpgItem = new javax.swing.JMenuItem();
        christianFormatItem = new javax.swing.JMenuItem();
        sergeyFormatItem = new javax.swing.JMenuItem();
        christianImportFormatItem = new javax.swing.JMenuItem();
        sergeyImportFormatItem = new javax.swing.JMenuItem();
        gifItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        printItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoItem = new javax.swing.JMenuItem();
        redoItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        cutItem = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        clearSelectedItem = new javax.swing.JMenuItem();
        clearAllItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        selectAllItem = new javax.swing.JMenuItem();
        deselectAllItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        zoomInItem = new javax.swing.JMenuItem();
        zoomOutItem = new javax.swing.JMenuItem();
        zoomSelectedItem = new javax.swing.JMenuItem();
        mergeSelectedItem = new javax.swing.JMenuItem();
        triangulateItem = new javax.swing.JMenuItem();
        stellateSelectedItem = new javax.swing.JMenuItem();
        nodeToQuadrangleItem = new javax.swing.JMenuItem();
        onePlanarAugmentorItem = new javax.swing.JMenuItem();
        subdivideSelectedItem = new javax.swing.JMenuItem();
        testItem = new javax.swing.JMenuItem();
        fitContentItem = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        gridItem = new javax.swing.JMenuItem();
        geometricTranformationsMenu = new javax.swing.JMenu();
        scaleItem = new javax.swing.JMenuItem();
        rotateItem = new javax.swing.JMenuItem();
        mirrorXItem = new javax.swing.JMenuItem();
        mirrorYItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        analyzeMenu = new javax.swing.JMenu();
        toolsMenu = new javax.swing.JMenu();
        planarityMenu = new javax.swing.JMenuItem();
        acyclicnessMenu = new javax.swing.JMenuItem();
        connectivityMenu = new javax.swing.JMenuItem();
        biconnectivityMenu = new javax.swing.JMenuItem();
        maxDegreeMenu = new javax.swing.JMenuItem();
        bipartitenessMenu = new javax.swing.JMenuItem();
        stNumberingMenu = new javax.swing.JMenuItem();
        shortestCycleMenu = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        nodeAttributesItem = new javax.swing.JMenuItem();
        edgeAttributesItem = new javax.swing.JMenuItem();
        layoutMenu = new javax.swing.JMenu();
        orthogonalItem = new javax.swing.JMenuItem();
        circularItem = new javax.swing.JMenuItem();
        treeItem = new javax.swing.JMenuItem();
        organicItem = new javax.swing.JMenuItem();
        smartOrganicItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        jSeparator13 = new javax.swing.JPopupMenu.Separator();
        springEmbedderItem = new javax.swing.JMenuItem();
        fppItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Drawing Tool");
        getContentPane().setLayout(new java.awt.BorderLayout(20, 20));

        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.setPreferredSize(new java.awt.Dimension(300, 300));
        mainPanel.setLayout(new java.awt.BorderLayout(0, 10));

        progressBarPanel.setLayout(new java.awt.GridLayout(1, 2, 10, 10));

        infoLabel.setText("Number of Vertices: 0     Number of Edges: 0");
        progressBarPanel.add(infoLabel);

        progressBar.setPreferredSize(new java.awt.Dimension(250, 20));
        progressBar.setStringPainted(true);
        progressBarPanel.add(progressBar);

        mainPanel.add(progressBarPanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);
        editMode = new y.view.EditMode() {
            protected void nodeCreated(y.base.Node v) {
                graphRealizer.updateNode(v);
                view.getGraph2D().setLabelText(v, "" + view.getGraph2D().nodeCount());
                view.getGraph2D().getRealizer(v).getLabel().setVisible(true);
            }
        };
        editMode.setPopupMode(new y.view.PopupMode() {
            /**
             * Provides a JPopupMenu that is displayed for the given node.
             */
            public javax.swing.JPopupMenu getNodePopup(y.base.Node node) {
                //Hack to pass object node as parameter to inner class
                final y.base.Node v = node;

                javax.swing.JPopupMenu popupMenu = new javax.swing.JPopupMenu();

                javax.swing.JMenuItem editLabel = new javax.swing.JMenuItem(view.getGraph2D().getLabelText(node).equals("") ? "Add Label" : "Edit Label");
                editLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png")));
                editLabel.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        javax.swing.JTextField labelTextField = new javax.swing.JTextField(view.getGraph2D().getLabelText(v));
                        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Label: ", labelTextField}, (view.getGraph2D().getLabelText(v).equals("") ? "Add Label" : "Edit Label"), javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);
                        if (result == javax.swing.JOptionPane.OK_OPTION) {
                            view.getGraph2D().setLabelText(v, labelTextField.getText());
                            view.updateView();
                        }
                    }
                });

                javax.swing.JMenuItem removeVertex = new javax.swing.JMenuItem("Delete Vertex");
                removeVertex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Delete.png")));
                removeVertex.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        view.getGraph2D().removeSelection();
                        view.updateView();
                    }
                });

                popupMenu.add(editLabel);
                popupMenu.add(removeVertex);
                return popupMenu;
            }

            /**
             * Provides a zoom in/out JPopupMenu.
             */
            public javax.swing.JPopupMenu getPaperPopup(double x, double y) {
                javax.swing.JPopupMenu popupMenu = new javax.swing.JPopupMenu();

                javax.swing.JMenuItem zoomIn = new javax.swing.JMenuItem("Zoom In");
                zoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomIn.png")));
                zoomIn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        view.setZoom(view.getZoom() * 1.2);
                        view.updateView();
                    }
                });
                javax.swing.JMenuItem zoomOut = new javax.swing.JMenuItem("Zoom Out");
                zoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomOut.png")));
                zoomOut.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        view.setZoom(view.getZoom() * 0.8);
                        view.updateView();
                    }
                });
                javax.swing.JMenuItem fitContent = new javax.swing.JMenuItem("Fit Content");
                fitContent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FitContent.png")));
                fitContent.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        view.fitContent();
                        view.updateView();
                    }
                });
                javax.swing.JMenuItem indexLabel = new javax.swing.JMenuItem("Index Labels");
                indexLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png")));
                indexLabel.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        for (y.base.NodeCursor nc = view.getGraph2D().nodes(); nc.ok(); nc.next()) {
                            view.getGraph2D().setLabelText(nc.node(), "" + (nc.node().index() + 1));
                        }
                        view.updateView();
                    }
                });
                javax.swing.JMenuItem clear = new javax.swing.JMenuItem("Clear Graph");
                clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Delete.png")));
                clear.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        view.getGraph2D().clear();
                        view.updateView();
                    }
                });
                popupMenu.add(zoomIn);
                popupMenu.add(zoomOut);
                popupMenu.add(fitContent);
                popupMenu.addSeparator();
                popupMenu.add(indexLabel);
                popupMenu.addSeparator();
                popupMenu.add(clear);
                return popupMenu;
            }
        });
        editMode.allowBendCreation(true);

        y.view.Graph2DViewMouseWheelZoomListener mwl = new y.view.Graph2DViewMouseWheelZoomListener();
        mwl.addToCanvas(this.view);
        mwl.setCenterZooming(false);
        view.addMouseWheelListener(mwl);

        view.addViewMode(this.editMode);
        view.setGridMode(true);
        view.setGridVisible(true);
        view.setGridResolution(25);
        view.setGridType(y.view.View2DConstants.GRID_POINTS);
        mainPanel.add(this.view, java.awt.BorderLayout.CENTER);
        view.requestFocus();

        //Clipboard
        this.clipboard = new y.view.Graph2DClipboard(view);
        //Undo-Redo Manager
        this.undoManager = new y.view.Graph2DUndoManager();
        this.view.getGraph2D().addGraphListener(undoManager);
        this.view.getGraph2D().setBackupRealizersHandler(undoManager);
        this.undoManager.setViewContainer(view);
        //Add Graph Listener
        this.view.getGraph2D().addGraphListener(new y.base.GraphListener() {
            public void onGraphEvent(y.base.GraphEvent gde) {
                infoLabel.setText("Number of Vetrices: " + view.getGraph2D().nodeCount() + "     Number of Edges: " + view.getGraph2D().edgeCount());
                for (java.util.Iterator<y.view.Drawable> it = view.getDrawables().iterator(); it.hasNext(); ) {
                    view.removeDrawable(it.next());
                }
                view.updateView();
            }
        });

        fileMenu.setText("File");

        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/New.png"))); // NOI18N
        newMenuItem.setText("New");

        blankGraphItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        blankGraphItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Bin.png"))); // NOI18N
        blankGraphItem.setText("Blank Graph");
        blankGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blankGraphItemActionPerformed(evt);
            }
        });
        newMenuItem.add(blankGraphItem);
        newMenuItem.add(jSeparator6);

        treeGraphItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        treeGraphItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/New.png"))); // NOI18N
        treeGraphItem.setText("Tree Graph");
        treeGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeGraphItemActionPerformed(evt);
            }
        });
        newMenuItem.add(treeGraphItem);

        connectedGraphItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        connectedGraphItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/New.png"))); // NOI18N
        connectedGraphItem.setText("Connected Graph");
        connectedGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectedGraphItemActionPerformed(evt);
            }
        });
        newMenuItem.add(connectedGraphItem);

        randomGraphItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        randomGraphItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/New.png"))); // NOI18N
        randomGraphItem.setText("Random Graph");
        randomGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomGraphItemActionPerformed(evt);
            }
        });
        newMenuItem.add(randomGraphItem);

        twoTreeMatchingItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/New.png"))); // NOI18N
        twoTreeMatchingItem.setText("Two trees + Matching");
        twoTreeMatchingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoTreeMatchingItemActionPerformed(evt);
            }
        });
        newMenuItem.add(twoTreeMatchingItem);

        fileMenu.add(newMenuItem);
        fileMenu.add(jSeparator3);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Open.png"))); // NOI18N
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        reloadItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        reloadItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Reload.png"))); // NOI18N
        reloadItem.setText("Reload");
        reloadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadItemActionPerformed(evt);
            }
        });
        fileMenu.add(reloadItem);
        fileMenu.add(jSeparator12);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Save.png"))); // NOI18N
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Save.png"))); // NOI18N
        saveAsItem.setText("Save As...");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed();
            }
        });
        fileMenu.add(saveAsItem);

        exportMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        exportMenu.setText("Export");

        jpgItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        jpgItem.setText("Export to JPG");
        jpgItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpgItemActionPerformed(evt);
            }
        });
        exportMenu.add(jpgItem);

        gifItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        gifItem.setText("Export to GIF");
        gifItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gifItemActionPerformed(evt);
            }
        });
        exportMenu.add(gifItem);

        christianFormatItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        christianFormatItem.setText("Export for Christian");
        christianFormatItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                christianFormatItemActionPerformed(evt);
            }
        });
        exportMenu.add(christianFormatItem);

        sergeyFormatItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        sergeyFormatItem.setText("Export for Sergey");
        sergeyFormatItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sergeyFormatItemActionPerformed(evt);
            }
        });
        exportMenu.add(sergeyFormatItem);

        importMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        importMenu.setText("Import");

        christianImportFormatItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        christianImportFormatItem.setText("Import from Christian");
        christianImportFormatItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                christianImportFormatItemActionPerformed(evt);
            }
        });
        importMenu.add(christianImportFormatItem);

        sergeyImportFormatItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Export.png"))); // NOI18N
        sergeyImportFormatItem.setText("Import from Sergey");
        sergeyImportFormatItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sergeyImportFormatItemActionPerformed(evt);
            }
        });
        importMenu.add(sergeyImportFormatItem);

        fileMenu.add(exportMenu);
        fileMenu.add(importMenu);
        fileMenu.add(jSeparator4);

        printItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Print.png"))); // NOI18N
        printItem.setText("Print");
        printItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printItemActionPerformed(evt);
            }
        });
        fileMenu.add(printItem);
        fileMenu.add(jSeparator5);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Exit.png"))); // NOI18N
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        undoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Undo.png"))); // NOI18N
        undoItem.setText("Undo");
        undoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoItemActionPerformed(evt);
            }
        });
        editMenu.add(undoItem);

        redoItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Redo.png"))); // NOI18N
        redoItem.setText("Redo");
        redoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoItemActionPerformed(evt);
            }
        });
        editMenu.add(redoItem);
        editMenu.add(jSeparator7);

        cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Cut.png"))); // NOI18N
        cutItem.setText("Cut");
        cutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });
        editMenu.add(cutItem);

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Copy.png"))); // NOI18N
        copyItem.setText("Copy");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        editMenu.add(copyItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Paste.png"))); // NOI18N
        pasteItem.setText("Paste");
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteItem);
        editMenu.add(jSeparator1);

        clearSelectedItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        clearSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Delete.png"))); // NOI18N
        clearSelectedItem.setText("Clear Selected");
        clearSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectedItemActionPerformed(evt);
            }
        });
        editMenu.add(clearSelectedItem);

        clearAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        clearAllItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Delete.png"))); // NOI18N
        clearAllItem.setText("Clear all");
        clearAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllItemActionPerformed(evt);
            }
        });
        editMenu.add(clearAllItem);
        editMenu.add(jSeparator2);

        selectAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAllItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/SelectAll.png"))); // NOI18N
        selectAllItem.setText("Select all");
        selectAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllItemActionPerformed(evt);
            }
        });
        editMenu.add(selectAllItem);

        deselectAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        deselectAllItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DeSelect.png"))); // NOI18N
        deselectAllItem.setText("Deselect all");
        deselectAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllItemActionPerformed(evt);
            }
        });
        editMenu.add(deselectAllItem);

        mainMenuBar.add(editMenu);

        viewMenu.setText("View");

        zoomInItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        zoomInItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomIn.png"))); // NOI18N
        zoomInItem.setText("Zoom In");
        zoomInItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInItemActionPerformed(evt);
            }
        });
        viewMenu.add(zoomInItem);

        zoomOutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        zoomOutItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomOut.png"))); // NOI18N
        zoomOutItem.setText("Zoom Out");
        zoomOutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutItemActionPerformed(evt);
            }
        });
        viewMenu.add(zoomOutItem);

        zoomSelectedItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        zoomSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomIn.png"))); // NOI18N
        zoomSelectedItem.setText("Zoom Selected");
        zoomSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomSelectedItemActionPerformed(evt);
            }
        });
        viewMenu.add(zoomSelectedItem);

        fitContentItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        fitContentItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FitContent.png"))); // NOI18N
        fitContentItem.setText("Fit Content");
        fitContentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitContentItemActionPerformed(evt);
            }
        });
        viewMenu.add(fitContentItem);
        viewMenu.add(jSeparator11);

        toolsMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        toolsMenu.setText("Actions and Tools");

        triangulateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        triangulateItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        triangulateItem.setText("Triangulate Planar Graph");
        triangulateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangulateItemActionPerformed(evt);
            }
        });
        toolsMenu.add(triangulateItem);

        mergeSelectedItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mergeSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        mergeSelectedItem.setText("Merge Selected Nodes");
        mergeSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeSelectedItemActionPerformed(evt);
            }
        });
        toolsMenu.add(mergeSelectedItem);

        stellateSelectedItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        stellateSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        stellateSelectedItem.setText("Stellate Selected Nodes");
        stellateSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stellateSelectedItemActionPerformed(evt);
            }
        });
        toolsMenu.add(stellateSelectedItem);

        nodeToQuadrangleItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        nodeToQuadrangleItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        nodeToQuadrangleItem.setText("Selected Nodes To Quadrangle");
        nodeToQuadrangleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeToQuadrangleItemActionPerformed(evt);
            }
        });
        toolsMenu.add(nodeToQuadrangleItem);

        onePlanarAugmentorItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        onePlanarAugmentorItem.setText("Augment By 2-hops");
        onePlanarAugmentorItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onePlanarAugmentorItemActionPerformed(evt);
            }
        });
        toolsMenu.add(onePlanarAugmentorItem);

        subdivideSelectedItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        subdivideSelectedItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        subdivideSelectedItem.setText("Subdivide Selected Edges");
        subdivideSelectedItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subdivideSelectedItemActionPerformed(evt);
            }
        });
        toolsMenu.add(subdivideSelectedItem);

        testItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        testItem.setText("Multipurpose Button");
        testItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testItemActionPerformed(evt);
            }
        });
        toolsMenu.add(testItem);

        gridItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        gridItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Grid.png"))); // NOI18N
        gridItem.setText("Grid");
        gridItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridItemActionPerformed(evt);
            }
        });
        viewMenu.add(gridItem);

        geometricTranformationsMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        geometricTranformationsMenu.setText("Geometric Tranformations");

        scaleItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        scaleItem.setText("Scale");
        scaleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleItemActionPerformed(evt);
            }
        });
        geometricTranformationsMenu.add(scaleItem);

        rotateItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        rotateItem.setText("Rotate");
        rotateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateItemActionPerformed(evt);
            }
        });
        geometricTranformationsMenu.add(rotateItem);

        mirrorXItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        mirrorXItem.setText("X-Axis Mirror");
        mirrorXItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorXItemActionPerformed(evt);
            }
        });
        geometricTranformationsMenu.add(mirrorXItem);

        mirrorYItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        mirrorYItem.setText("Y-Axis Mirror");
        mirrorYItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorYItemActionPerformed(evt);
            }
        });
        geometricTranformationsMenu.add(mirrorYItem);

        viewMenu.add(geometricTranformationsMenu);
        viewMenu.add(jSeparator8);

        analyzeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        analyzeMenu.setText("Analyze Graph");

        planarityMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        planarityMenu.setText("Planarity");
        planarityMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planarityMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(planarityMenu);

        acyclicnessMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        acyclicnessMenu.setText("Acyclicness");
        acyclicnessMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acyclicnessMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(acyclicnessMenu);

        connectivityMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        connectivityMenu.setText("Connectivity");
        connectivityMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectivityMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(connectivityMenu);

        biconnectivityMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        biconnectivityMenu.setText("Biconnectivity");
        biconnectivityMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biconnectivityMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(biconnectivityMenu);

        maxDegreeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        maxDegreeMenu.setText("Maximum Degree");
        maxDegreeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDegreeMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(maxDegreeMenu);

        bipartitenessMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        bipartitenessMenu.setText("Bipartiteness");
        bipartitenessMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bipartitenessMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(bipartitenessMenu);

        stNumberingMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        stNumberingMenu.setText("st-Numbering");
        stNumberingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stNumberingMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(stNumberingMenu);

        shortestCycleMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        shortestCycleMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Tool.png"))); // NOI18N
        shortestCycleMenu.setText("Shortest Cycle");
        shortestCycleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortestCycleMenuActionPerformed(evt);
            }
        });
        analyzeMenu.add(shortestCycleMenu);

        viewMenu.add(toolsMenu);
        viewMenu.add(analyzeMenu);
        viewMenu.add(jSeparator9);

        nodeAttributesItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Pencil.png"))); // NOI18N
        nodeAttributesItem.setText("Node Attributes");
        nodeAttributesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeAttributesItemActionPerformed(evt);
            }
        });
        viewMenu.add(nodeAttributesItem);

        edgeAttributesItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Pencil.png"))); // NOI18N
        edgeAttributesItem.setText("Edge Attributes");
        viewMenu.add(edgeAttributesItem);

        mainMenuBar.add(viewMenu);

        layoutMenu.setText("Layout");

        orthogonalItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        orthogonalItem.setText("Orthogonal");
        orthogonalItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthogonalItemActionPerformed(evt);
            }
        });
        layoutMenu.add(orthogonalItem);

        circularItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        circularItem.setText("Circular");
        circularItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circularItemActionPerformed(evt);
            }
        });
        layoutMenu.add(circularItem);

        treeItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        treeItem.setText("Tree");
        treeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeItemActionPerformed(evt);
            }
        });
        layoutMenu.add(treeItem);

        organicItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        organicItem.setText("Organic");
        organicItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organicItemActionPerformed(evt);
            }
        });
        layoutMenu.add(organicItem);

        smartOrganicItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        smartOrganicItem.setText("Smart Organic");
        smartOrganicItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smartOrganicItemActionPerformed(evt);
            }
        });
        layoutMenu.add(smartOrganicItem);
        layoutMenu.add(jSeparator10);

        springEmbedderItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        springEmbedderItem.setText("Spring Embedder");
        springEmbedderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                springEmbedderItemActionPerformed(evt);
            }
        });
        layoutMenu.add(springEmbedderItem);

        fppItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Layout.png"))); // NOI18N
        fppItem.setText("De Fraysseix Pach Pollack");
        fppItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fppItemActionPerformed(evt);
            }
        });
        layoutMenu.add(fppItem);

        mainMenuBar.add(layoutMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("gml") || file.toString().toLowerCase().endsWith("graphml"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "GML Files [.gml, .graphml]";
            }

        });
        if (chooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            fileNamePath = chooser.getSelectedFile().toString();

            y.io.IOHandler ioh;

            if (fileNamePath.toLowerCase().endsWith(".gml")) {
                ioh = new y.io.GMLIOHandler();
            } else if (fileNamePath.toLowerCase().endsWith(".graphml")) {
                ioh = new yext.graphml.graph2D.GraphMLIOHandler();
            } else {
                return;
            }

            try {
                view.getGraph2D().clear();
                ioh.read(view.getGraph2D(), fileNamePath);

                view.fitContent();
                view.updateView();
                view.requestFocus();
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveAsItemActionPerformed() {//GEN-FIRST:event_saveAsItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("gml") || file.toString().toLowerCase().endsWith("graphml"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "GML Files [.gml, .graphml]";
            }

        });
        if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            fileNamePath = chooser.getSelectedFile().toString();
            y.io.IOHandler ioh;
            if (fileNamePath.toLowerCase().endsWith(".gml")) {
                ioh = new y.io.GMLIOHandler();
            } else {
                // The default save format is GraphML
                if (!fileNamePath.toLowerCase().endsWith(".graphml")) {
                    fileNamePath = fileNamePath + ".graphml";
                }
                ioh = new y.io.GraphMLIOHandler();
            }

            try {
                ioh.write(view.getGraph2D(), fileNamePath);
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void printItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printItemActionPerformed
        y.view.Graph2DPrinter graph2DPrinter = new y.view.Graph2DPrinter(view);
        java.awt.print.PrinterJob printJob = java.awt.print.PrinterJob.getPrinterJob();
        printJob.setPrintable(graph2DPrinter, printJob.defaultPage());
        if (printJob.printDialog()) {
            try {
                printJob.print();
            } catch (java.lang.Exception exc) {
                y.util.D.show(exc);
            }
        }

    }//GEN-LAST:event_printItemActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void undoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItemActionPerformed
        this.undoManager.getUndoAction().actionPerformed(evt);
    }//GEN-LAST:event_undoItemActionPerformed

    private void redoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItemActionPerformed
        this.undoManager.getRedoAction().actionPerformed(evt);
    }//GEN-LAST:event_redoItemActionPerformed

    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutItemActionPerformed
        this.clipboard.getCutAction().actionPerformed(evt);
    }//GEN-LAST:event_cutItemActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        this.clipboard.getCopyAction().actionPerformed(evt);
    }//GEN-LAST:event_copyItemActionPerformed

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
        this.clipboard.getPasteAction().actionPerformed(evt);
    }//GEN-LAST:event_pasteItemActionPerformed

    private void selectAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllItemActionPerformed
        view.getGraph2D().selectBoxContent(view.getGraph2D().getBoundingBox());
        view.updateView();
    }//GEN-LAST:event_selectAllItemActionPerformed

    private void deselectAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllItemActionPerformed
        view.getGraph2D().selectAllNodesAndBends(false);
        view.updateView();
    }//GEN-LAST:event_deselectAllItemActionPerformed

    private void blankGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blankGraphItemActionPerformed
        this.fileNamePath = null;
        view.getGraph2D().clear();
        view.updateView();
    }//GEN-LAST:event_blankGraphItemActionPerformed

    private void clearAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllItemActionPerformed
        view.getGraph2D().clear();
        view.updateView();
    }//GEN-LAST:event_clearAllItemActionPerformed

    private void clearSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectedItemActionPerformed
        view.getGraph2D().removeSelection();
        view.updateView();
    }//GEN-LAST:event_clearSelectedItemActionPerformed

    private void zoomSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomSelectedItemActionPerformed
        y.view.Graph2D graph = view.getGraph2D();

        //Determine the bounding box of all selected nodes
        y.base.NodeCursor nc = graph.selectedNodes();

        if (nc.ok())  //selected nodes present
        {
            java.awt.geom.Rectangle2D box = graph.getRealizer(nc.node()).getBoundingBox();

            for (nc.next(); nc.ok(); nc.next()) {
                graph.getRealizer(nc.node()).calcUnionRect(box);
            }

            //Zoom to box area
            view.zoomToArea(box.getX(), box.getY(), box.getWidth(), box.getHeight());

            //Allow a maximum zoom level of 2.0.
            if (view.getZoom() > 2.0) {
                view.setZoom(2.0);
            }
            view.updateView();
        }
    }//GEN-LAST:event_zoomSelectedItemActionPerformed

    private void triangulateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangulateItemActionPerformed

        y.view.Graph2D graph = view.getGraph2D();

        if (y.algo.GraphChecker.isPlanar(graph)) {
            algorithms.algo.Connectivity.triangulatePlanarGraph(graph);
            view.updateView();
        }
        else
        {
            this.infoLabel.setText("The input graph is not planar");
        }

    }//GEN-LAST:event_triangulateItemActionPerformed

    private void mergeSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeSelectedItemActionPerformed
        y.view.Graph2D graph = view.getGraph2D();

        //Determine the bounding box of all selected nodes
        y.base.NodeCursor nc = graph.selectedNodes();

        //Nodes to remove
        y.base.NodeList nodesToRemove = new y.base.NodeList();

        if (nc.ok())  //selected nodes present
        {
            y.base.Node base = nc.node();

            for (nc.next(); nc.ok(); nc.next()) {
                for (y.base.NodeCursor neighbors = nc.node().neighbors(); neighbors.ok(); neighbors.next()) {
                    if (!graph.containsEdge(base, neighbors.node()) && !graph.containsEdge(neighbors.node(), base)) {
                        graph.createEdge(base, neighbors.node());
                    }
                    nodesToRemove.add(nc.node());
                }
            }
        }

        for (nc = nodesToRemove.nodes(); nc.ok(); nc.next()) {
            graph.removeNode(nc.node());
        }

        //Update the view.
        view.updateView();

    }//GEN-LAST:event_mergeSelectedItemActionPerformed

    private void stellateSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stellateSelectedItemActionPerformed
        y.view.Graph2D graph = view.getGraph2D();

        //Determine the bounding box of all selected nodes
        y.base.NodeCursor nc = graph.selectedNodes();

        if (nc.ok())  //selected nodes present
        {
            y.base.Node base = view.getGraph2D().createNode();
            view.getGraph2D().setRealizer(base, view.getGraph2D().getRealizer(nc.node()).createCopy());

            double x = 0;
            double y = 0;
            for (; nc.ok(); nc.next()) {
                x += view.getGraph2D().getRealizer(nc.node()).getCenterX();
                y += view.getGraph2D().getRealizer(nc.node()).getCenterY();
                view.getGraph2D().createEdge(base, nc.node());
            }
            view.getGraph2D().getRealizer(base).setCenter(x / nc.size(), y / nc.size());
        }
        //Update the view.
        view.updateView();

    }//GEN-LAST:event_stellateSelectedItemActionPerformed

    private void nodeToQuadrangleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stellateSelectedItemActionPerformed
        y.view.Graph2D graph = view.getGraph2D();

        for (y.base.NodeCursor nc = graph.selectedNodes(); nc.ok(); nc.next())  //selected nodes present
        {
            if (nc.node().degree() >= 4) {
                java.util.LinkedList<y.base.Edge> remove = new java.util.LinkedList<y.base.Edge>();
                y.layout.planar.PlanarInformation plan = new y.layout.planar.PlanarInformation(graph);
                y.layout.planar.CombinatorialEmbedder embedder = new y.layout.planar.CombinatorialEmbedder();
                embedder.setPlanarInformation(plan);
                embedder.embed();

                for (y.base.EdgeCursor ec = graph.edges(); ec.ok(); ec.next()) {
                    if (plan.isInsertedEdge(ec.edge())) {
                        remove.add(ec.edge());
                    }
                }

                y.base.Node v1 = graph.createNode();
                y.base.Node v2 = graph.createNode();

                graph.setRealizer(v1, graph.getRealizer(nc.node()).createCopy());
                graph.setRealizer(v2, graph.getRealizer(nc.node()).createCopy());
                graph.getRealizer(v1).setSelected(false);
                graph.getRealizer(v2).setSelected(false);
                graph.getRealizer(v1).setCenterX(graph.getRealizer(v1).getCenterX() - graph.getRealizer(v2).getWidth());
                graph.getRealizer(v2).setCenterX(graph.getRealizer(v2).getCenterX() + graph.getRealizer(v1).getWidth());

                int i = 0;
                y.base.Node[] neighbors = new y.base.Node[nc.node().outEdges().size()];
                for (y.base.EdgeCursor ec = nc.node().outEdges(); ec.ok(); ec.next()) {
                    neighbors[i++] = plan.cyclicNextEdge(ec.edge()).target();
                }

                for (i = 0; i < neighbors.length; i++) {
                    graph.createEdge(neighbors[i], i < neighbors.length / 2 ? v1 : v2);
                }
                graph.createEdge(v2, neighbors[neighbors.length / 2 - 1]);
                graph.createEdge(v1, neighbors[neighbors.length - 1]);

                for (y.base.Edge e : remove) {
                    graph.removeEdge(e);
                }

                graph.removeNode(nc.node());
            }
        }

        //Update the view.
        view.updateView();

    }//GEN-LAST:event_nodeToQuadrangleItemActionPerformed

    private void onePlanarAugmentorItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onePlanarAugmentorItemActionPerformed
        y.view.Graph2D g = view.getGraph2D();

        y.layout.planar.PlanarInformation plan = new y.layout.planar.PlanarInformation(g);
        y.layout.planar.CombinatorialEmbedder embedder = new y.layout.planar.CombinatorialEmbedder();
        embedder.setPlanarInformation(plan);
        embedder.embed();

        java.util.LinkedList<y.base.Edge> remove = new java.util.LinkedList<y.base.Edge>();
        ;

        for (y.base.EdgeCursor ec = g.edges(); ec.ok(); ec.next()) {
            if (plan.isInsertedEdge(ec.edge())) {
                remove.add(ec.edge());
            }
        }

        for (y.base.Edge e : remove) {
            g.removeEdge(e);
        }

        for (y.layout.planar.FaceCursor fc = plan.faces(); fc.ok(); fc.next()) {
            y.base.Node[] faceNodes = new y.base.Node[fc.face().edges().size()];
            int i = 0;
            for (y.base.EdgeCursor ec = fc.face().edges(); ec.ok(); ec.next()) {
                faceNodes[i++] = ec.edge().source();
            }
            for (i = 0; i < faceNodes.length - 3; i += 4) {
                g.createEdge(faceNodes[i], faceNodes[i + 2]);
                g.createEdge(faceNodes[i + 1], faceNodes[i + 3]);
            }
        }

        //Update the view.
        view.updateView();

    }//GEN-LAST:event_nodeToQuadrangleItemActionPerformed

    private void subdivideSelectedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subdivideSelectedItemActionPerformed
        y.view.Graph2D graph = view.getGraph2D();

        //Edges to remove
        y.base.EdgeList edgesToRemove = new y.base.EdgeList();

        for (y.base.EdgeCursor ec = graph.selectedEdges(); ec.ok(); ec.next()) {
            y.base.Node newNode = graph.createNode();
            graph.setRealizer(newNode, graph.getRealizer(ec.edge().source()).createCopy());
            graph.getRealizer(newNode).setCenterX((graph.getRealizer(ec.edge().source()).getCenterX() + graph.getRealizer(ec.edge().target()).getCenterX()) / 2);
            graph.getRealizer(newNode).setCenterY((graph.getRealizer(ec.edge().source()).getCenterY() + graph.getRealizer(ec.edge().target()).getCenterY()) / 2);
            graph.createEdge(ec.edge().source(), newNode);
            graph.createEdge(ec.edge().target(), newNode);
            edgesToRemove.add(ec.edge());
        }

        for (y.base.EdgeCursor ec = edgesToRemove.edges(); ec.ok(); ec.next()) {
            graph.removeEdge(ec.edge());
        }

        //Update the view.
        view.updateView();
    }//GEN-LAST:event_subdivideSelectedItemActionPerformed

    private void testItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testItemActionPerformed
        PlanarInformation plan = new PlanarInformation(view.getGraph2D());
        DrawingEmbedder embedder = new DrawingEmbedder();
        embedder.setKeepBends(false);
        embedder.setPlanarInformation(plan);
        embedder.embed();

        System.out.println("Faces ");
        for (FaceCursor f = plan.faces();  f.ok(); f.next())
        {
            System.out.println("Length: " + f.face().edges().size() + ", Face: " + f.face());
        }

        for (EdgeCursor cursor = view.getGraph2D().edges(); cursor.ok(); cursor.next()) {
            Edge edge = cursor.edge();
            if (plan.isInsertedEdge(edge)) {
                view.getGraph2D().removeEdge(edge);
            }
        }

        //Update the view.
        view.updateView();
    }//GEN-LAST:event_testItemActionPerformed

    private void zoomOutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutItemActionPerformed
        view.setZoom(view.getZoom() / 1.2);
        view.updateView();
    }//GEN-LAST:event_zoomOutItemActionPerformed

    private void zoomInItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInItemActionPerformed
        view.setZoom(view.getZoom() * 1.2);
        view.updateView();
    }//GEN-LAST:event_zoomInItemActionPerformed

    private void treeGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeGraphItemActionPerformed
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(false);
        rgg.allowSelfLoops(false);

        javax.swing.JTextField nodeCount = new javax.swing.JTextField();

        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount}, "Tree Properties", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(nodeCount.getText()) - 1);
            } catch (java.lang.NumberFormatException exc) {
                javax.swing.JOptionPane.showMessageDialog(null, "Incorrect input.\nThe tree will be created with 10 nodes.", "Incorrect Input", javax.swing.JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(9);
            } finally {
                rgg.generate(view.getGraph2D());
                util.Utilities.displayGraphRandomly(view.getGraph2D());
            }
            this.fileNamePath = null;
            this.graphRealizer.updateGraph();
        }
    }//GEN-LAST:event_treeGraphItemActionPerformed

    private void connectedGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectedGraphItemActionPerformed
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(true);
        rgg.allowSelfLoops(false);

        javax.swing.JTextField nodeCount = new javax.swing.JTextField();
        javax.swing.JTextField edgeCount = new javax.swing.JTextField();

        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount, "Number of Edges (may be more to achive connectivity): ", edgeCount}, "Graph Properties", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(edgeCount.getText()));
            } catch (java.lang.NumberFormatException exc) {
                javax.swing.JOptionPane.showMessageDialog(null, "Incorrect input.\nThe tree will be created with 10 nodes and 10 edges.", "Incorrect Input", javax.swing.JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(10);
            } finally {
                rgg.generate(view.getGraph2D());
                y.algo.GraphConnectivity.makeConnected(view.getGraph2D());
                util.Utilities.displayGraphRandomly(view.getGraph2D());
                this.fileNamePath = null;
                this.graphRealizer.updateGraph();
            }
        }
    }//GEN-LAST:event_connectedGraphItemActionPerformed

    private void fitContentItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitContentItemActionPerformed
        view.fitContent();
        view.updateView();
    }//GEN-LAST:event_fitContentItemActionPerformed

    private void randomGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomGraphItemActionPerformed
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(true);
        rgg.allowSelfLoops(false);

        javax.swing.JTextField nodeCount = new javax.swing.JTextField();
        javax.swing.JTextField edgeCount = new javax.swing.JTextField();

        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount, "Number of Edges: ", edgeCount}, "Graph Properties", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(edgeCount.getText()));
            } catch (java.lang.NumberFormatException exc) {
                javax.swing.JOptionPane.showMessageDialog(null, "Incorrect input.\nThe tree will be created with 10 nodes and 10 edges.", "Incorrect Input", javax.swing.JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(10);
            } finally {
                rgg.generate(view.getGraph2D());

                util.Utilities.displayGraphRandomly(view.getGraph2D());
                this.graphRealizer.updateGraph();
            }
            this.fileNamePath = null;
        }
    }//GEN-LAST:event_randomGraphItemActionPerformed

    private void jpgItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpgItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".jpg"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "JPG Files [.jpg]";
            }

        });
        if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".jpg")) {
                fileName = fileName + ".jpg";
            }
            y.io.IOHandler ioh = new y.io.JPGIOHandler();

            try {
                ioh.write(view.getGraph2D(), fileName);
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_jpgItemActionPerformed

    private void gifItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gifItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".gif"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "GIF Files [.gif]";
            }

        });
        if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".gif")) {
                fileName = fileName + ".gif";
            }
            y.io.IOHandler ioh = new y.io.GIFIOHandler();

            try {
                ioh.write(view.getGraph2D(), fileName);
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_gifItemActionPerformed

    private void christianFormatItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_christianFormatItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".amf"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "AF Files [.amf]";
            }

        });
        if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".amf")) {
                fileName = fileName + ".amf";
            }
            try {
                new io.ChristianIOHandler().write(view.getGraph2D(), fileName);
            }
            catch (java.io.IOException exc)
            {
                y.util.D.show(exc);
            }
        }
    }//GEN-LAST:event_christianItemActionPerformed

    private void sergeyFormatItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sergeyFormatItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".edges"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "Edges Files [.edges]";
            }

        });
        if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".edges")) {
                fileName = fileName + ".edges";
            }
            try {
                new io.SergeyIOHandler().write(view.getGraph2D(), fileName);
            }
            catch (java.io.IOException exc)
            {
                y.util.D.show(exc);
            }
        }
    }//GEN-LAST:event_sergeyItemActionPerformed

    private void christianImportFormatItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_christianImportFormatItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("amf"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "AMF Files [.amf]";
            }

        });
        if (chooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            fileNamePath = chooser.getSelectedFile().toString();

            io.ChristianIOHandler ioh = new ChristianIOHandler();

            try {
                view.getGraph2D().clear();

                y.base.Graph g = ioh.read(fileNamePath);
                y.base.NodeMap map = g.createNodeMap();
                for (NodeCursor nc = g.nodes(); nc.ok(); nc.next())
                {
                    map.set(nc.node(), view.getGraph2D().createNode());
                }
                for (EdgeCursor ec = g.edges(); ec.ok(); ec.next())
                {
                    view.getGraph2D().createEdge((y.base.Node) map.get(ec.edge().target()), (y.base.Node) map.get(ec.edge().source()));
                }
                g.disposeNodeMap(map);

                util.Utilities.displayGraphRandomly(view.getGraph2D());
                view.fitContent();
                view.updateView();
                view.requestFocus();
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_christianImportItemActionPerformed

    private void sergeyImportFormatItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sergeyImportFormatItemActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("edges"));
            }

            /**
             * The description of this filter.
             */
            public String getDescription() {
                return "Edges Files [.edges]";
            }

        });
        if (chooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            fileNamePath = chooser.getSelectedFile().toString();

            io.SergeyIOHandler ioh = new io.SergeyIOHandler();

            try {
                view.getGraph2D().clear();

                y.base.Graph g = ioh.read(fileNamePath);
                y.base.NodeMap map = g.createNodeMap();
                for (NodeCursor nc = g.nodes(); nc.ok(); nc.next())
                {
                    map.set(nc.node(), view.getGraph2D().createNode());
                }
                for (EdgeCursor ec = g.edges(); ec.ok(); ec.next())
                {
                    view.getGraph2D().createEdge((y.base.Node) map.get(ec.edge().target()), (y.base.Node) map.get(ec.edge().source()));
                }
                g.disposeNodeMap(map);

                util.Utilities.displayGraphRandomly(view.getGraph2D());
                view.fitContent();
                view.updateView();
                view.requestFocus();
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        }
    }//GEN-LAST:event_sergeyImportItemActionPerformed

    private void nodeAttributesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeAttributesItemActionPerformed
        if (this.nodeAttributes == null) {
            this.nodeAttributes = new NodeAttributesFrame(view, graphRealizer);
        }

        this.nodeAttributes.setVisible(true);
    }//GEN-LAST:event_nodeAttributesItemActionPerformed

    private void springEmbedderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_springEmbedderItemActionPerformed
        javax.swing.JTextField iterationsTextField = new javax.swing.JTextField("5000");
        int iterations = 5000;

        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Number of Iterations: ", iterationsTextField}, "Algorithm Properties", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                iterations = Integer.parseInt(iterationsTextField.getText());
            } catch (java.lang.NumberFormatException exc) {
                javax.swing.JOptionPane.showMessageDialog(null, "Incorrect input.\nThe number of iterations will be set to 5000.", "Incorrect Input", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }

        algorithms.organic.ForceDirectedAlgorithm fd = new algorithms.organic.ForceDirectedAlgorithm(view, iterations) {
            public void calculateVectors() {
                algorithms.organic.ForceDirectedFactory.calculateSpringForcesEades(graph, 150, 100, 0.01, map);
                //algorithms.organic.ForceDirectedFactory.calculatePlyForces(graph, 150, 0.01, map);
                algorithms.organic.ForceDirectedFactory.calculateElectricForcesEades(graph, 50000, 0.01, map);
                //algorithms.organic.ForceDirectedFactory.calculateAttractiveForcesFR(graph, 100, 0.001, map);
            }
        };
        fd.addAlgorithmListener(new event.AlgorithmListener() {
            public void algorithmStarted(event.AlgorithmEvent evt) {
            }

            public void algorithmFinished(event.AlgorithmEvent evt) {
                progressBar.setValue(0);
                view.fitContent();
                view.updateView();
                for (y.base.NodeCursor u = view.getGraph2D().nodes(); u.ok(); u.next()) {
                    view.addDrawable(new layout.PlyCircleDrawable(view, u.node(), java.awt.Color.RED));
                }
                view.updateView();
            }

            public void algorithmStateChanged(event.AlgorithmEvent evt) {
                progressBar.setValue(evt.currentStatus());
            }
        });
        this.thread = new Thread(fd);
        this.thread.start();

        //fd.run();
        view.updateView();

    }//GEN-LAST:event_springEmbedderItemActionPerformed

    private void fppItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_springEmbedderItemActionPerformed
        if (y.algo.GraphChecker.isPlanar(view.getGraph2D())) {
            FraysseixPachPollack fpp = new FraysseixPachPollack(view.getGraph2D(), new FraysseixPachPollack.FPPSettings());
            //fpp.run();
            view.fitContent();
            view.updateView();
        } else {
            this.infoLabel.setText("The input graph is not planar");
        }

    }//GEN-LAST:event_springEmbedderItemActionPerformed

    private void planarityMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planarityMenuActionPerformed
        this.infoLabel.setText("The input graph is " + (y.algo.GraphChecker.isPlanar(view.getGraph2D()) ? "" : " not") + " planar");
    }//GEN-LAST:event_planarityMenuActionPerformed

    private void connectivityMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectivityMenuActionPerformed
        this.infoLabel.setText("The input graph is " + (y.algo.GraphChecker.isConnected(view.getGraph2D()) ? "" : " not") + " connected");
    }//GEN-LAST:event_connectivityMenuActionPerformed

    private void bipartitenessMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bipartitenessMenuActionPerformed
        this.infoLabel.setText("The input graph is " + (y.algo.GraphChecker.isBipartite(view.getGraph2D()) ? "" : " not") + " bipartite");
    }//GEN-LAST:event_bipartitenessMenuActionPerformed

    private void biconnectivityMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biconnectivityMenuActionPerformed
        this.infoLabel.setText("The input graph is " + (y.algo.GraphChecker.isConnected(view.getGraph2D()) ? "" : " not") + " biconnected");
    }//GEN-LAST:event_biconnectivityMenuActionPerformed

    private void maxDegreeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDegreeMenuActionPerformed
        int maxDegree = 0;
        for (y.base.NodeCursor nc = view.getGraph2D().nodes(); nc.ok(); nc.next()) {
            maxDegree = Math.max(maxDegree, nc.node().degree());
        }
        this.infoLabel.setText("The degree of the graph is " + maxDegree);
    }//GEN-LAST:event_maxDegreeMenuActionPerformed

    private void acyclicnessMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acyclicnessMenuActionPerformed
        this.infoLabel.setText("The input graph is " + (y.algo.GraphChecker.isAcyclic(view.getGraph2D()) ? "" : " not") + " acyclic");
    }//GEN-LAST:event_acyclicnessMenuActionPerformed

    private void shortestCycleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortestCycleMenuActionPerformed
        if (view.getGraph2D().nodeCount() == 0 || view.getGraph2D().edgeCount() == 0) {
            this.infoLabel.setText("The input graph is empty");
            return;
        }

        int cycleLength = new algorithms.algo.ShortestCycle(view.getGraph2D()).computeShortestCycle();

        this.infoLabel.setText(cycleLength != Integer.MAX_VALUE ? "The minimum cycle is of lengh " + cycleLength : "The graph is acyclic");
    }//GEN-LAST:event_shortestCycleMenuActionPerformed

    private void orthogonalItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthogonalItemActionPerformed
        y.module.LayoutModule module = new y.module.OrthogonalLayoutModule();
        y.option.OptionHandler handler = module.getOptionHandler();
        if (handler != null && !handler.showEditor()) {
            return;
        }
        module.start(view.getGraph2D());
    }//GEN-LAST:event_orthogonalItemActionPerformed

    private void circularItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circularItemActionPerformed
        y.module.LayoutModule module = new y.module.CircularLayoutModule();
        y.option.OptionHandler handler = module.getOptionHandler();
        if (handler != null && !handler.showEditor()) {
            return;
        }
        module.start(view.getGraph2D());
    }//GEN-LAST:event_circularItemActionPerformed

    private void treeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeItemActionPerformed
        y.module.LayoutModule module = new y.module.TreeLayoutModule();
        y.option.OptionHandler handler = module.getOptionHandler();
        if (handler != null && !handler.showEditor()) {
            return;
        }
        module.start(view.getGraph2D());
    }//GEN-LAST:event_treeItemActionPerformed

    private void organicItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organicItemActionPerformed
        y.module.LayoutModule module = new y.module.OrganicLayoutModule();
        y.option.OptionHandler handler = module.getOptionHandler();
        if (handler != null && !handler.showEditor()) {
            return;
        }
        module.start(view.getGraph2D());
    }//GEN-LAST:event_organicItemActionPerformed

    private void smartOrganicItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smartOrganicItemActionPerformed
        y.module.LayoutModule module = new y.module.SmartOrganicLayoutModule();
        y.option.OptionHandler handler = module.getOptionHandler();
        if (handler != null && !handler.showEditor()) {
            return;
        }
        module.start(view.getGraph2D());
    }//GEN-LAST:event_smartOrganicItemActionPerformed

    private void gridItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridItemActionPerformed
        view.setGridMode(!view.getGridMode());
        view.setGridVisible(!view.isGridVisible());
        view.updateView();
    }//GEN-LAST:event_gridItemActionPerformed

    private void scaleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleItemActionPerformed
        javax.swing.JTextField scaleFactorTextField = new javax.swing.JTextField("2");
        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Scale Factor: ", scaleFactorTextField}, "Scale", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (result == javax.swing.JOptionPane.OK_OPTION) {
            y.layout.transformer.GraphTransformer gt = new y.layout.transformer.GraphTransformer();
            try {
                gt.setOperation(y.layout.transformer.GraphTransformer.SCALE);
                gt.setScaleFactor(Double.valueOf(scaleFactorTextField.getText()));
                if (gt.canLayout(view.getGraph2D())) {
                    gt.doLayout(view.getGraph2D());
                }
                view.updateView();
            } catch (java.lang.NumberFormatException exc) {
                this.infoLabel.setText("Wrong papameter passed as scale factor.");
            }
        }
    }//GEN-LAST:event_scaleItemActionPerformed

    private void rotateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateItemActionPerformed
        javax.swing.JTextField rotateAngleTextField = new javax.swing.JTextField("90");
        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Rotation Angle: ", rotateAngleTextField}, "Scale", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (result == javax.swing.JOptionPane.OK_OPTION) {
            y.layout.transformer.GraphTransformer gt = new y.layout.transformer.GraphTransformer();
            try {
                gt.setOperation(y.layout.transformer.GraphTransformer.ROTATE);
                gt.setRotationAngle(Double.valueOf(rotateAngleTextField.getText()));
                if (gt.canLayout(view.getGraph2D())) {
                    gt.doLayout(view.getGraph2D());
                }
                view.updateView();
            } catch (java.lang.NumberFormatException exc) {
                this.infoLabel.setText("Wrong papameter passed as scale factor.");
            }
        }
    }//GEN-LAST:event_rotateItemActionPerformed

    private void mirrorXItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorXItemActionPerformed
        y.layout.transformer.GraphTransformer gt = new y.layout.transformer.GraphTransformer();
        gt.setOperation(y.layout.transformer.GraphTransformer.MIRROR_XAXIS);
        if (gt.canLayout(view.getGraph2D())) {
            gt.doLayout(view.getGraph2D());
        }
        view.updateView();
    }//GEN-LAST:event_mirrorXItemActionPerformed

    private void mirrorYItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorYItemActionPerformed
        y.layout.transformer.GraphTransformer gt = new y.layout.transformer.GraphTransformer();
        gt.setOperation(y.layout.transformer.GraphTransformer.MIRROR_YAXIS);
        if (gt.canLayout(view.getGraph2D())) {
            gt.doLayout(view.getGraph2D());
        }
        view.updateView();
    }//GEN-LAST:event_mirrorYItemActionPerformed

    private void twoTreeMatchingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoTreeMatchingItemActionPerformed
        javax.swing.JTextField nodeCount = new javax.swing.JTextField();

        int result = javax.swing.JOptionPane.showOptionDialog(null, new Object[]{"Tree height: ", nodeCount}, "Graph Size", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            view.getGraph2D().clear();

            int h = 3;
            try {
                h = Integer.parseInt(nodeCount.getText());

            } catch (java.lang.NumberFormatException exc) {
                javax.swing.JOptionPane.showMessageDialog(null, "Incorrect input.\nThe tree will be created with height 3.", "Incorrect Input", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

            y.base.Node[] nodes1 = new y.base.Node[(int) Math.pow(2, h + 1) - 1];
            y.base.Node[] nodes2 = new y.base.Node[(int) Math.pow(2, h + 1) - 1];

            for (int i = 0; i < nodes1.length; i++) {
                nodes1[i] = view.getGraph2D().createNode();
                nodes2[i] = view.getGraph2D().createNode();
                view.updateView();
            }
            int counter = 1;
            for (int i = 0; i < Math.min(nodes1.length, nodes2.length); i++) {
                int level = 0;
                while (i >= Math.pow(2, level) - 1) {
                    level++;
                }

                if (i < (int) Math.pow(2, h) - 1) {
                    view.getGraph2D().createEdge(nodes1[i], nodes1[counter]);
                    view.getGraph2D().createEdge(nodes1[i], nodes1[counter + 1]);
                    view.getGraph2D().createEdge(nodes2[i], nodes2[counter]);
                    view.getGraph2D().createEdge(nodes2[i], nodes2[counter + 1]);
                    counter += 2;
                }

                int x = (int) (view.getBounds().x + (i + 1 - Math.pow(2, level - 1)) * view.getGraph2D().getCurrentView().getComponent().getWidth() / Math.pow(2, level - 1));
                int y1 = (int) (view.getBounds().y + (level - 1) * view.getGraph2D().getCurrentView().getComponent().getHeight() / (2 * (h + 1)));
                int y2 = (int) (view.getBounds().y + view.getBounds().height - (level - 1) * view.getGraph2D().getCurrentView().getComponent().getHeight() / (2 * (h + 1)));

                view.getGraph2D().getRealizer(nodes1[i]).setLocation(x, y1);
                view.getGraph2D().getRealizer(nodes2[i]).setLocation(x, y2);
            }

            (new algorithms.algo.MatchingGenerator(view.getGraph2D(), nodes1, nodes2, h)).addFeasibleMatchingRevised();

            view.updateView();
            this.fileNamePath = null;
            this.graphRealizer.updateGraph();
        }
    }//GEN-LAST:event_twoTreeMatchingItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        if (fileNamePath != null) {
            y.io.IOHandler ioh;
            if (fileNamePath.toLowerCase().endsWith(".gml")) {
                ioh = new y.io.GMLIOHandler();
            } else {
                // The default save format is GraphML
                ioh = new y.io.GraphMLIOHandler();
            }
            try {
                ioh.write(view.getGraph2D(), fileNamePath);
            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        } else {
            javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(fileNamePath);
            chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(java.io.File file) {
                    return (file.isDirectory() || file.toString().toLowerCase().endsWith(".gml"));
                }

                /**
                 * The description of this filter.
                 */
                public String getDescription() {
                    return "GML Files [.gml]";
                }

            });
            if (chooser.showSaveDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
                fileNamePath = chooser.getSelectedFile().toString();
                if (!fileNamePath.toLowerCase().endsWith(".gml")) {
                    fileNamePath = fileNamePath + ".gml";
                }
                y.io.IOHandler ioh = new y.io.GMLIOHandler();

                try {
                    ioh.write(view.getGraph2D(), fileNamePath);
                    fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
                } catch (java.io.IOException ioe) {
                    y.util.D.show(ioe);
                }
            }
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void reloadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadItemActionPerformed
        if (fileNamePath != null) {
            y.io.IOHandler ioh;
            if (fileNamePath.toLowerCase().endsWith(".gml")) {
                ioh = new y.io.GMLIOHandler();
            } else {
                // The default save format is GraphML
                ioh = new y.io.GraphMLIOHandler();
            }
            try {
                view.getGraph2D().clear();
                ioh.read(view.getGraph2D(), fileNamePath);
                view.fitContent();
                view.updateView();
            } catch (java.io.IOException ioe) {
                y.util.D.show(ioe);
            }
        } else {
            infoLabel.setText("No file was recently opened.");
        }
    }//GEN-LAST:event_reloadItemActionPerformed

    private void stNumberingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stNumberingMenuActionPerformed
        if (!y.algo.GraphChecker.isBiconnected(view.getGraph2D())) {
            infoLabel.setText("The input graph is not biconnected.");
            return;
        }

        y.base.NodeList stOrder = y.algo.NodeOrders.st(view.getGraph2D());
        for (y.base.NodeCursor nc = stOrder.nodes(); nc.ok(); nc.next()) {
            view.getGraph2D().getRealizer(nc.node()).setLabelText("" + ((int) stOrder.indexOf(nc.node()) + 1));
        }
        view.updateView();
    }//GEN-LAST:event_stNumberingMenuActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // check for 'os.name == Windows 7' does not work, since JDK 1.4 uses the compatibility mode
            if (!"com.sun.java.swing.plaf.motif.MotifLookAndFeel".equals(javax.swing.UIManager.getSystemLookAndFeelClassName()) && !"com.sun.java.swing.plaf.gtk.GTKLookAndFeel".equals(javax.swing.UIManager.getSystemLookAndFeelClassName()) && !javax.swing.UIManager.getSystemLookAndFeelClassName().equals(javax.swing.UIManager.getLookAndFeel().getClass().getName()) && !(System.getProperty("java.version").startsWith("1.4") && System.getProperty("os.name").startsWith("Windows") && "6.1".equals(System.getProperty("os.version")))) {
                javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - extra ones
    private y.view.Graph2DView view;
    private y.view.EditMode editMode;
    private y.view.Graph2DClipboard clipboard;
    private y.view.Graph2DUndoManager undoManager;

    //Graph Layouter object
    private layout.GraphRealizer graphRealizer;

    //Object that is used to specify the node attributes
    private javax.swing.JFrame nodeAttributes;

    //Object invoked to run the algorithms
    private java.lang.Thread thread;

    //Object that keeps track of the latest open/saved file
    private String fileNamePath;
    private String fileNamePathFolder;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem acyclicnessMenu;
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem biconnectivityMenu;
    private javax.swing.JMenuItem maxDegreeMenu;
    private javax.swing.JMenuItem bipartitenessMenu;
    private javax.swing.JMenuItem blankGraphItem;
    private javax.swing.JMenuItem circularItem;
    private javax.swing.JMenuItem clearAllItem;
    private javax.swing.JMenuItem clearSelectedItem;
    private javax.swing.JMenuItem connectedGraphItem;
    private javax.swing.JMenuItem connectivityMenu;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JMenuItem cutItem;
    private javax.swing.JMenuItem deselectAllItem;
    private javax.swing.JMenuItem edgeAttributesItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JMenu importMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fitContentItem;
    private javax.swing.JMenu geometricTranformationsMenu;
    private javax.swing.JMenuItem gifItem;
    private javax.swing.JMenuItem sergeyFormatItem;
    private javax.swing.JMenuItem christianFormatItem;
    private javax.swing.JMenuItem sergeyImportFormatItem;
    private javax.swing.JMenuItem christianImportFormatItem;
    private javax.swing.JMenuItem gridItem;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator12;
    private javax.swing.JPopupMenu.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JMenuItem jpgItem;
    private javax.swing.JMenu layoutMenu;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem mirrorXItem;
    private javax.swing.JMenuItem mirrorYItem;
    private javax.swing.JMenu newMenuItem;
    private javax.swing.JMenuItem nodeAttributesItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem organicItem;
    private javax.swing.JMenuItem orthogonalItem;
    private javax.swing.JMenuItem pasteItem;
    private javax.swing.JMenuItem planarityMenu;
    private javax.swing.JMenuItem printItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressBarPanel;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JMenuItem randomGraphItem;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JMenuItem reloadItem;
    private javax.swing.JMenuItem rotateItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem scaleItem;
    private javax.swing.JMenuItem selectAllItem;
    private javax.swing.JMenuItem shortestCycleMenu;
    private javax.swing.JMenuItem smartOrganicItem;
    private javax.swing.JMenuItem springEmbedderItem;
    private javax.swing.JMenuItem fppItem;
    private javax.swing.JMenuItem stNumberingMenu;
    private javax.swing.JMenuItem treeGraphItem;
    private javax.swing.JMenuItem treeItem;
    private javax.swing.JMenuItem twoTreeMatchingItem;
    private javax.swing.JMenuItem undoItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenuItem zoomInItem;
    private javax.swing.JMenuItem zoomOutItem;
    private javax.swing.JMenuItem zoomSelectedItem;
    private javax.swing.JMenuItem mergeSelectedItem;
    private javax.swing.JMenuItem triangulateItem;
    private javax.swing.JMenuItem subdivideSelectedItem;
    private javax.swing.JMenuItem testItem;
    private javax.swing.JMenuItem stellateSelectedItem;
    private javax.swing.JMenuItem nodeToQuadrangleItem;
    private javax.swing.JMenuItem onePlanarAugmentorItem;
    // End of variables declaration//GEN-END:variables
}