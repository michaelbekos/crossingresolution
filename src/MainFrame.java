import com.yworks.yfiles.algorithms.*;
import com.yworks.yfiles.geometry.PointD;
import com.yworks.yfiles.geometry.SizeD;
import com.yworks.yfiles.graph.*;
import com.yworks.yfiles.graph.styles.PolylineEdgeStyle;
import com.yworks.yfiles.graph.styles.ShinyPlateNodeStyle;
import com.yworks.yfiles.graph.styles.SimpleLabelStyle;
import com.yworks.yfiles.layout.GraphTransformer;
import com.yworks.yfiles.layout.OperationType;
import com.yworks.yfiles.layout.YGraphAdapter;
import com.yworks.yfiles.layout.circular.CircularLayout;
import com.yworks.yfiles.layout.organic.OrganicLayout;
import com.yworks.yfiles.layout.orthogonal.OrthogonalLayout;
import com.yworks.yfiles.layout.tree.TreeLayout;
import com.yworks.yfiles.utils.IEventListener;
import com.yworks.yfiles.utils.IList;
import com.yworks.yfiles.utils.ItemEventArgs;
import com.yworks.yfiles.view.*;
import com.yworks.yfiles.view.export.CanvasPrintable;
import com.yworks.yfiles.view.export.ContextConfigurator;
import com.yworks.yfiles.view.export.PixelImageExporter;
import com.yworks.yfiles.view.input.*;
import io.ChristianIOHandler;
import io.SergeyIOHandler;
import layout.algo.ForceDirectedAlgorithm;
import layout.algo.ForceDirectedFactory;
import layout.algo.event.AlgorithmEvent;
import layout.algo.event.AlgorithmListener;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;

import java.awt.*;
import java.awt.Color;
import java.awt.event.*;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.ArrayList;

/**
 * Created by michael on 28.10.16.
 */
public class MainFrame extends JFrame {

    //Graph Drawing related objects
    private GraphComponent view;
    private OrganicLayout defaultLayouter;
    private GraphEditorInputMode graphEditorInputMode;
    private GridVisualCreator gridVisualCreator;
    private GraphSnapContext graphSnapContext;
    private boolean isGridVisible;

    //Default Styles
    ShinyPlateNodeStyle defaultNodeStyle;
    PolylineEdgeStyle   defaultEdgeStyle;
    SimpleLabelStyle defaultLabelStyle;

    //Object that keeps track of the latest open/saved file
    private String fileNamePath;
    private String fileNamePathFolder;

    //Object invoked to run the algorithms
    private Thread thread;


    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        this.initComponents();
        this.initMenuBar();

        //Centering
        //this.setSize(1000, 800);
        //java.awt.Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit();
        //java.awt.Dimension screenSize = toolkit.getScreenSize();
        //int x = (screenSize.width - this.getWidth()) / 2;
        //int y = (screenSize.height - this.getHeight()) / 2;
        //this.setLocation(x, y);

        super.setTitle("Graph Drawing Tool");
        super.setMinimumSize(new Dimension(400,300));
        super.setExtendedState(MAXIMIZED_BOTH);
        super.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        super.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                System.exit(0);
            }
        });
    }

    /**
     * This method is called within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        this.progressBarPanel = new JPanel();
        this.progressBarPanel.setLayout(new GridLayout(1, 2, 10, 10));

        this.infoLabel = new JLabel();
        this.infoLabel.setText("Number of Vertices: 0     Number of Edges: 0");
        this.progressBarPanel.add(infoLabel);

        this.progressBar = new JProgressBar();
        this.progressBar.setPreferredSize(new Dimension(250, 20));
        this.progressBar.setStringPainted(true);
        this.progressBarPanel.add(this.progressBar);

        this.mainPanel = new JPanel();
        this.mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        this.mainPanel.setPreferredSize(new Dimension(300, 300));
        this.mainPanel.setLayout(new BorderLayout(0, 10));
        this.mainPanel.add(this.progressBarPanel, BorderLayout.PAGE_END);


        this.view = new GraphComponent();
        this.view.setSize(330, 330);
        this.mainPanel.add(this.view, BorderLayout.CENTER);
        this.view.requestFocus();
        this.view.getGraph().setUndoEngineEnabled(true);

        this.graphEditorInputMode = new GraphEditorInputMode();
        this.graphEditorInputMode.setCreateNodeAllowed(true);
        this.graphEditorInputMode.setCreateEdgeAllowed(true);
        this.graphEditorInputMode.setCreateBendAllowed(true);
        this.graphEditorInputMode.setEditLabelAllowed(true);
        this.graphEditorInputMode.addPopulateItemPopupMenuListener(new IEventListener<PopulateItemPopupMenuEventArgs<IModelItem>>() {
            @Override
            public void onEvent(Object o, PopulateItemPopupMenuEventArgs<IModelItem> iModelItemPopulateItemPopupMenuEventArgs) {
                if (iModelItemPopulateItemPopupMenuEventArgs.getItem() instanceof INode)
                {
                    populateNodePopupMenu(o, iModelItemPopulateItemPopupMenuEventArgs);
                }
                if (iModelItemPopulateItemPopupMenuEventArgs.getItem() instanceof IEdge)
                {
                    populateEdgePopupMenu(o, iModelItemPopulateItemPopupMenuEventArgs);
                }
            }
        });
        this.view.setInputMode(this.graphEditorInputMode);

        /*********************************************************************
         * Add two listeners two the graph
         ********************************************************************/
        this.view.getGraph().addNodeCreatedListener(new IEventListener<ItemEventArgs<INode>>() {
            @Override
            public void onEvent(Object o, ItemEventArgs<INode> iNodeItemEventArgs) {
                if (iNodeItemEventArgs.getItem() instanceof INode)
                {
                    view.getGraph().addLabel((INode)iNodeItemEventArgs.getItem(), new Integer(view.getGraph().getNodes().size()-1).toString());
                    infoLabel.setText("Number of Vetrices: " + view.getGraph().getNodes().size() + "     Number of Edges: " + view.getGraph().getEdges().size());
                }
            }
        });

        this.view.getGraph().addEdgeCreatedListener(new IEventListener<ItemEventArgs<IEdge>>() {
            @Override
            public void onEvent(Object o, ItemEventArgs<IEdge> iNodeItemEventArgs) {
                if (iNodeItemEventArgs.getItem() instanceof IEdge)
                {
                    infoLabel.setText("Number of Vetrices: " + view.getGraph().getNodes().size() + "     Number of Edges: " + view.getGraph().getEdges().size());
                }
            }
        });

        /*********************************************************************
         * Add two listeners two the graph
         ********************************************************************/
        this.graphSnapContext = new GraphSnapContext();
        this.graphEditorInputMode.setSnapContext(this.graphSnapContext);
        GridInfo gridInfo = new GridInfo();
        this.gridVisualCreator = new GridVisualCreator(gridInfo);
        this.view.getBackgroundGroup().addChild(this.gridVisualCreator, ICanvasObjectDescriptor.ALWAYS_DIRTY_INSTANCE);
        this.isGridVisible = true;
        this.graphSnapContext.setGridSnapType(GridSnapTypes.GRID_POINTS);
        this.graphSnapContext.setNodeGridConstraintProvider(new GridConstraintProvider<>(gridInfo));
        this.graphSnapContext.setBendGridConstraintProvider(new GridConstraintProvider<>(gridInfo));

        /*********************************************************************
         * Default Node Styling
         ********************************************************************/
        this.defaultNodeStyle = new ShinyPlateNodeStyle();
        this.defaultNodeStyle.setPaint(Color.BLUE);
        this.defaultNodeStyle.setPen(new Pen(Color.BLACK, 1));
        this.defaultNodeStyle.setShadowDrawingEnabled(false);
        this.view.getGraph().getNodeDefaults().setStyle(defaultNodeStyle);
        this.view.getGraph().getDecorator().getNodeDecorator().getFocusIndicatorDecorator().hideImplementation();
        this.view.getGraph().getNodeDefaults().setSize(new SizeD(30, 30));

        /*********************************************************************
         * Default Edge Styling
         ********************************************************************/
        this.defaultEdgeStyle = new PolylineEdgeStyle();
        this.defaultEdgeStyle.setPen(Pen.getBlack());
        this.view.getGraph().getEdgeDefaults().setStyle(this.defaultEdgeStyle);

        /*********************************************************************
         * Default Label Styling
         ********************************************************************/
        this.defaultLabelStyle = new SimpleLabelStyle();
        this.defaultLabelStyle.setFont(new Font("Dialog", Font.PLAIN, 12));
        this.defaultLabelStyle.setTextPaint(Colors.WHITE);
        this.view.getGraph().getNodeDefaults().getLabelDefaults().setStyle(this.defaultLabelStyle);
        this.view.getGraph().getEdgeDefaults().getLabelDefaults().setStyle(this.defaultLabelStyle);

        super.getContentPane().setLayout(new java.awt.BorderLayout(20, 20));
        super.getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        this.defaultLayouter = new OrganicLayout();
        this.defaultLayouter.setPreferredEdgeLength(100);
        this.defaultLayouter.setMinimumNodeDistance(100);
    }

    private void initMenuBar()
    {
        this.mainMenuBar = new JMenuBar();

        /*********************************************************************
         * File Menu
         ********************************************************************/
        this.fileMenu = new JMenu();
        this.fileMenu.setText("File");
        this.mainMenuBar.add(this.fileMenu);

        this.newMenuItem = new JMenu();
        this.newMenuItem.setIcon(new ImageIcon(getClass().getResource("/resources/new-document-16.png")));
        this.newMenuItem.setText("New");

        this.blankGraphItem = new JMenuItem();
        this.blankGraphItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK));
        this.blankGraphItem.setIcon(new ImageIcon(getClass().getResource("/resources/delete-16.png")));
        this.blankGraphItem.setText("Blank Graph");
        this.blankGraphItem.addActionListener(this::blankGraphItemGraphItemActionPerformed);
        this.newMenuItem.add(this.blankGraphItem);
        this.newMenuItem.add(new JPopupMenu.Separator());

        this.treeGraphItem = new JMenuItem();
        this.treeGraphItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        this.treeGraphItem.setIcon(new ImageIcon(getClass().getResource("/resources/new-document-16.png")));
        this.treeGraphItem.setText("Tree Graph");
        this.treeGraphItem.addActionListener(this::treeGraphItemActionPerformed);
        this.newMenuItem.add(this.treeGraphItem);

        this.connectedGraphItem = new JMenuItem();
        this.connectedGraphItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        this.connectedGraphItem.setIcon(new ImageIcon(getClass().getResource("/resources/new-document-16.png")));
        this.connectedGraphItem.setText("Connected Graph");
        this.connectedGraphItem.addActionListener(this::connectedGraphItemActionPerformed);
        this.newMenuItem.add(this.connectedGraphItem);

        this.randomGraphItem = new JMenuItem();
        this.randomGraphItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        this.randomGraphItem.setIcon(new ImageIcon(getClass().getResource("/resources/new-document-16.png")));
        this.randomGraphItem.setText("Random Graph");
        this.randomGraphItem.addActionListener(this::randomGraphItemActionPerformed);
        this.newMenuItem.add(this.randomGraphItem);

        this.fileMenu.add(this.newMenuItem);
        this.fileMenu.add(new JSeparator());

        this.openItem = new JMenuItem();
        this.openItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
        this.openItem.setIcon(new ImageIcon(getClass().getResource("/resources/open-16.png")));
        this.openItem.setText("Open");
        this.openItem.addActionListener(this::openItemActionPerformed);
        this.fileMenu.add(this.openItem);

        this.reloadItem = new JMenuItem();
        this.reloadItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_MASK));
        this.reloadItem.setIcon(new ImageIcon(getClass().getResource("/resources/reload-16.png")));
        this.reloadItem.setText("Reload");
        this.reloadItem.addActionListener(this::reloadItemActionPerformed);
        this.fileMenu.add(this.reloadItem);
        this.fileMenu.add(new JSeparator());

        this.saveItem = new JMenuItem();
        this.saveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
        this.saveItem.setIcon(new ImageIcon(getClass().getResource("/resources/save-16.png")));
        this.saveItem.setText("Save");
        this.saveItem.addActionListener(this::saveItemActionPerformed);
        this.fileMenu.add(this.saveItem);

        this.saveAsItem = new JMenuItem();
        saveAsItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        saveAsItem.setIcon(new ImageIcon(getClass().getResource("/resources/save-16.png")));
        saveAsItem.setText("Save As...");
        saveAsItem.addActionListener(this::saveAsItemActionPerformed);
        this.fileMenu.add(saveAsItem);

        this.exportMenu = new JMenu();
        this.exportMenu.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.exportMenu.setText("Export");

        this.jpgItem = new JMenuItem();
        this.jpgItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.jpgItem.setText("Export to JPG");
        this.jpgItem.addActionListener(this::jpgItemActionPerformed);
        this.exportMenu.add(this.jpgItem);

        this.gifItem = new JMenuItem();
        this.gifItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.gifItem.setText("Export to GIF");
        this.gifItem.addActionListener(this::gifItemActionPerformed);
        this.exportMenu.add(this.gifItem);

        this.christianFormatItem = new JMenuItem();
        this.christianFormatItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.christianFormatItem.setText("Export for Christian");
        this.christianFormatItem.addActionListener(this::christianFormatItemActionPerformed);
        this.exportMenu.add(this.christianFormatItem);

        this.sergeyFormatItem = new JMenuItem();
        this.sergeyFormatItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.sergeyFormatItem.setText("Export for Sergey");
        this.sergeyFormatItem.addActionListener(this::sergeyFormatItemActionPerformed);
        this.exportMenu.add(this.sergeyFormatItem);

        this.importMenu = new JMenu();
        this.importMenu.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.importMenu.setText("Import");

        this.christianImportFormatItem = new JMenuItem();
        this.christianImportFormatItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.christianImportFormatItem.setText("Import from Christian");
        this.christianImportFormatItem.addActionListener(this::christianImportFormatItemActionPerformed);
        this.importMenu.add(this.christianImportFormatItem);

        this.sergeyImportFormatItem = new JMenuItem();
        this.sergeyImportFormatItem.setIcon(new ImageIcon(getClass().getResource("/resources/export-image-16.png")));
        this.sergeyImportFormatItem.setText("Import from Sergey");
        this.sergeyImportFormatItem.addActionListener(this::sergeyImportFormatItemActionPerformed);
        this.importMenu.add(this.sergeyImportFormatItem);

        this.fileMenu.add(this.exportMenu);
        this.fileMenu.add(this.importMenu);
        this.fileMenu.add(new JSeparator());

        this.printItem = new JMenuItem();
        this.printItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, InputEvent.CTRL_MASK));
        this.printItem.setIcon(new ImageIcon(getClass().getResource("/resources/print-16.png")));
        this.printItem.setText("Print");
        this.printItem.addActionListener(this::printItemActionPerformed);
        this.fileMenu.add(this.printItem);
        this.fileMenu.add(new JSeparator());

        this.quitItem = new JMenuItem();
        this.quitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
        this.quitItem.setIcon(new ImageIcon(getClass().getResource("/resources/exit-16.png")));
        this.quitItem.setText("Quit");
        this.quitItem.addActionListener(evt -> System.exit(0));
        this.fileMenu.add(this.quitItem);

        this.mainMenuBar.add(this.fileMenu);

        /*********************************************************************
         * Edit Menu
         ********************************************************************/

        this.editMenu = new JMenu();
        this.editMenu.setText("Edit");

        this.undoItem = new JMenuItem();
        this.undoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_MASK));
        this.undoItem.setIcon(new ImageIcon(getClass().getResource("/resources/undo-16.png")));
        this.undoItem.setText("Undo");
        this.undoItem.addActionListener(this::undoItemActionPerformed);
        this.editMenu.add(this.undoItem);

        this.redoItem = new JMenuItem();
        this.redoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_MASK));
        this.redoItem.setIcon(new ImageIcon(getClass().getResource("/resources/redo-16.png")));
        this.redoItem.setText("Redo");
        this.redoItem.addActionListener(this::redoItemActionPerformed);
        this.editMenu.add(this.redoItem);
        this.editMenu.add(new JSeparator());

        this.cutItem = new JMenuItem();
        this.cutItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK));
        this.cutItem.setIcon(new ImageIcon(getClass().getResource("/resources/cut-16.png")));
        this.cutItem.setText("Cut");
        this.cutItem.addActionListener(this::cutItemActionPerformed);
        this.editMenu.add(this.cutItem);

        this.copyItem = new JMenuItem();
        this.copyItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK));
        this.copyItem.setIcon(new ImageIcon(getClass().getResource("/resources/copy-16.png")));
        this.copyItem.setText("Copy");
        this.copyItem.addActionListener(this::copyItemActionPerformed);
        this.editMenu.add(this.copyItem);

        this.pasteItem = new JMenuItem();
        this.pasteItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK));
        this.pasteItem.setIcon(new ImageIcon(getClass().getResource("/resources/paste-16.png")));
        this.pasteItem.setText("Paste");
        this.pasteItem.addActionListener(this::pasteItemActionPerformed);
        this.editMenu.add(this.pasteItem);
        this.editMenu.add(new JSeparator());

        this.clearSelectedItem = new JMenuItem();
        this.clearSelectedItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0));
        this.clearSelectedItem.setIcon(new ImageIcon(getClass().getResource("/resources/delete-16.png")));
        this.clearSelectedItem.setText("Clear Selected");
        this.clearSelectedItem.addActionListener(this::clearSelectedItemActionPerformed);
        this.editMenu.add(this.clearSelectedItem);

        this.clearAllItem = new JMenuItem();
        this.clearAllItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0));
        this.clearAllItem.setIcon(new ImageIcon(getClass().getResource("/resources/delete-16.png")));
        this.clearAllItem.setText("Clear all");
        this.clearAllItem.addActionListener(this::clearAllItemActionPerformed);
        this.editMenu.add(this.clearAllItem);
        this.editMenu.add(new JSeparator());

        this.selectAllItem = new JMenuItem();
        this.selectAllItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_MASK));
        this.selectAllItem.setIcon(new ImageIcon(getClass().getResource("/resources/group-16.png")));
        this.selectAllItem.setText("Select all");
        this.selectAllItem.addActionListener(this::selectAllItemActionPerformed);
        this.editMenu.add(this.selectAllItem);

        this.deselectAllItem = new JMenuItem();
        this.deselectAllItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        this.deselectAllItem.setIcon(new ImageIcon(getClass().getResource("/resources/ungroup-16.png")));
        this.deselectAllItem.setText("Deselect all");
        this.deselectAllItem.addActionListener(this::deselectAllItemActionPerformed);
        this.editMenu.add(this.deselectAllItem);

        this.mainMenuBar.add(this.editMenu);

        /*********************************************************************
         * View Menu
         ********************************************************************/

        this.viewMenu = new JMenu();
        this.viewMenu.setText("View");

        this.zoomInItem = new JMenuItem();
        this.zoomInItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PLUS, InputEvent.CTRL_MASK));
        this.zoomInItem.setIcon(new ImageIcon(getClass().getResource("/resources/plus2-16.png")));
        this.zoomInItem.setText("Zoom In");
        this.zoomInItem.addActionListener(this::zoomInItemActionPerformed);
        this.viewMenu.add(this.zoomInItem);

        this.zoomOutItem = new JMenuItem();
        this.zoomOutItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, InputEvent.CTRL_MASK));
        this.zoomOutItem.setIcon(new ImageIcon(getClass().getResource("/resources/minus2-16.png")));
        this.zoomOutItem.setText("Zoom Out");
        this.zoomOutItem.addActionListener(this::zoomOutItemActionPerformed);
        this.viewMenu.add(this.zoomOutItem);

        this.fitContentItem = new JMenuItem();
        this.fitContentItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, InputEvent.CTRL_MASK));
        this.fitContentItem.setIcon(new ImageIcon(getClass().getResource("/resources/zoom-original2-16.png")));
        this.fitContentItem.setText("Fit Content");
        this.fitContentItem.addActionListener(this::fitContentItemActionPerformed);
        this.viewMenu.add(this.fitContentItem);
        this.viewMenu.add(new JSeparator());

        this.toolsMenu = new JMenu();
        this.toolsMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.toolsMenu.setText("Actions and Tools");

        /**
        this.triangulateItem = new JMenuItem();
        this.triangulateItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, InputEvent.CTRL_MASK));
        this.triangulateItem.setIcon(new ImageIcon(getClass().getResource("/resources/Tool.png")));
        this.triangulateItem.setText("Triangulate Planar Graph");
        this.triangulateItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                triangulateItemActionPerformed(evt);
            }
        });
        this.toolsMenu.add(this.triangulateItem);
        **/

        this.mergeSelectedItem = new JMenuItem();
        this.mergeSelectedItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_MASK));
        this.mergeSelectedItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.mergeSelectedItem.setText("Merge Selected Nodes");
        this.mergeSelectedItem.addActionListener(this::mergeSelectedItemActionPerformed);
        this.toolsMenu.add(this.mergeSelectedItem);

        this.stellateSelectedItem = new JMenuItem();
        this.stellateSelectedItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.ALT_MASK));
        this.stellateSelectedItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.stellateSelectedItem.setText("Stellate Selected Nodes");
        this.stellateSelectedItem.addActionListener(this::stellateSelectedItemActionPerformed);
        this.toolsMenu.add(this.stellateSelectedItem);

        /**
        nodeToQuadrangleItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.ALT_MASK));
        nodeToQuadrangleItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        nodeToQuadrangleItem.setText("Selected Nodes To Quadrangle");
        nodeToQuadrangleItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                nodeToQuadrangleItemActionPerformed(evt);
            }
        });
        toolsMenu.add(nodeToQuadrangleItem);


        onePlanarAugmentorItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        onePlanarAugmentorItem.setText("Augment By 2-hops");
        onePlanarAugmentorItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                onePlanarAugmentorItemActionPerformed(evt);
            }
        });
        toolsMenu.add(onePlanarAugmentorItem);
        **/

        this.subdivideSelectedItem = new JMenuItem();
        this.subdivideSelectedItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_MASK));
        this.subdivideSelectedItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.subdivideSelectedItem.setText("Subdivide Selected Edges");
        this.subdivideSelectedItem.addActionListener(this::subdivideSelectedItemActionPerformed);
        this.toolsMenu.add(this.subdivideSelectedItem);

        this.gridItem = new JMenuItem();
        this.gridItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_MASK));
        this.gridItem.setIcon(new ImageIcon(getClass().getResource("/resources/grid-16.png")));
        this.gridItem.setText("Grid");
        this.gridItem.addActionListener(this::gridItemActionPerformed);
        this.viewMenu.add(this.gridItem);

        this.geometricTranformationsMenu = new JMenu();
        this.geometricTranformationsMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.geometricTranformationsMenu.setText("Geometric Tranformations");

        this.scaleItem = new JMenuItem();
        this.scaleItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.scaleItem.setText("Scale");
        this.scaleItem.addActionListener(this::scaleItemActionPerformed);
        this.geometricTranformationsMenu.add(this.scaleItem);

        this.rotateItem = new JMenuItem();
        this.rotateItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.rotateItem.setText("Rotate");
        this.rotateItem.addActionListener(this::rotateItemActionPerformed);
        this.geometricTranformationsMenu.add(this.rotateItem);

        this.mirrorXItem = new JMenuItem();
        this.mirrorXItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.mirrorXItem.setText("X-Axis Mirror");
        this.mirrorXItem.addActionListener(this::mirrorXItemActionPerformed);
        this.geometricTranformationsMenu.add(this.mirrorXItem);

        this.mirrorYItem = new JMenuItem();
        this.mirrorYItem.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.mirrorYItem.setText("Y-Axis Mirror");
        this.mirrorYItem.addActionListener(this::mirrorYItemActionPerformed);
        this.geometricTranformationsMenu.add(this.mirrorYItem);
        this.viewMenu.add(this.geometricTranformationsMenu);
        this.viewMenu.add(new JSeparator());

        this.analyzeMenu = new JMenu();
        this.analyzeMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.analyzeMenu.setText("Analyze Graph");

        this.planarityMenu = new JMenuItem();
        this.planarityMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.planarityMenu.setText("Planarity");
        this.planarityMenu.addActionListener(this::planarityMenuActionPerformed);
        this.analyzeMenu.add(this.planarityMenu);

        this.acyclicnessMenu = new JMenuItem();
        this.acyclicnessMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.acyclicnessMenu.setText("Acyclicness");
        this.acyclicnessMenu.addActionListener(this::acyclicnessMenuActionPerformed);
        this.analyzeMenu.add(this.acyclicnessMenu);

        this.connectivityMenu = new JMenuItem();
        this.connectivityMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.connectivityMenu.setText("Connectivity");
        this.connectivityMenu.addActionListener(this::connectivityMenuActionPerformed);
        this.analyzeMenu.add(this.connectivityMenu);

        this.biconnectivityMenu = new JMenuItem();
        this.biconnectivityMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.biconnectivityMenu.setText("Biconnectivity");
        this.biconnectivityMenu.addActionListener(this::biconnectivityMenuActionPerformed);
        this.analyzeMenu.add(this.biconnectivityMenu);

        this.maxDegreeMenu = new JMenuItem();
        this.maxDegreeMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.maxDegreeMenu.setText("Maximum Degree");
        this.maxDegreeMenu.addActionListener(this::maxDegreeMenuActionPerformed);
        this.analyzeMenu.add(this.maxDegreeMenu);

        this.bipartitenessMenu = new JMenuItem();
        this.bipartitenessMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.bipartitenessMenu.setText("Bipartiteness");
        this.bipartitenessMenu.addActionListener(this::bipartitenessMenuActionPerformed);
        this.analyzeMenu.add(this.bipartitenessMenu);

        this.stNumberingMenu = new JMenuItem();
        this.stNumberingMenu.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
        this.stNumberingMenu.setText("st-Numbering");
        this.stNumberingMenu.addActionListener(this::stNumberingMenuActionPerformed);
        this.analyzeMenu.add(this.stNumberingMenu);

        this.viewMenu.add(this.toolsMenu);
        this.viewMenu.add(this.analyzeMenu);
        this.viewMenu.add(new JSeparator());

        this.mainMenuBar.add(this.viewMenu);

        /*********************************************************************
         * View Menu
         ********************************************************************/

        this.layoutMenu = new JMenu();
        this.layoutMenu.setText("Layout");

        this.orthogonalItem = new JMenuItem();
        this.orthogonalItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.orthogonalItem.setText("Orthogonal");
        this.orthogonalItem.addActionListener(this::orthogonalItemActionPerformed);
        this.layoutMenu.add(this.orthogonalItem);

        this.circularItem = new JMenuItem();
        this.circularItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.circularItem.setText("Circular");
        this.circularItem.addActionListener(this::circularItemActionPerformed);
        this.layoutMenu.add(this.circularItem);

        this.treeItem = new JMenuItem();
        this.treeItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.treeItem.setText("Tree");
        this.treeItem.addActionListener(this::treeItemActionPerformed);
        this.layoutMenu.add(this.treeItem);

        this.organicItem = new JMenuItem();
        this.organicItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.organicItem.setText("Organic");
        this.organicItem.addActionListener(this::organicItemActionPerformed);
        this.layoutMenu.add(this.organicItem);
        this.layoutMenu.add(new JSeparator());

        this.springEmbedderItem = new JMenuItem();
        this.springEmbedderItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.springEmbedderItem.setText("Spring Embedder");
        this.springEmbedderItem.addActionListener(this::springEmbedderItemActionPerformed);
        this.layoutMenu.add(this.springEmbedderItem);

        /**
        this.fppItem = new JMenuItem();
        this.fppItem.setIcon(new ImageIcon(getClass().getResource("/resources/layout-16.png")));
        this.fppItem.setText("De Fraysseix Pach Pollack");
        this.fppItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fppItemActionPerformed(evt);
            }
        });
        this.layoutMenu.add(this.fppItem);
        **/

        this.mainMenuBar.add(this.layoutMenu);

        super.setJMenuBar(this.mainMenuBar);
    }


    /*********************************************************************
     * Popup Menus
     ********************************************************************/
    private void populateEdgePopupMenu(Object o, PopulateItemPopupMenuEventArgs<IModelItem> args) {
        ISelectionModel<IEdge> selection = this.view.getSelection().getSelectedEdges();
        if (args.getItem() instanceof IEdge) {
            IEdge edge = (IEdge) args.getItem();
            selection.clear();
            selection.setSelected(edge, true);
            this.view.setCurrentItem(edge);

            JPopupMenu popupMenu = (JPopupMenu) args.getMenu();

            javax.swing.JMenuItem removeVertex = new javax.swing.JMenuItem("Delete");
            removeVertex.setIcon(new ImageIcon(getClass().getResource("/resources/delete-16.png")));
            removeVertex.addActionListener(evt -> {
                view.getGraph().remove(edge);
                view.updateUI();
            });

            popupMenu.add(removeVertex);
            args.setHandled(true);
        }
    }
    
    private void populateNodePopupMenu(Object o, PopulateItemPopupMenuEventArgs<IModelItem> args)
    {
        ISelectionModel<INode> selection = this.view.getSelection().getSelectedNodes();
        if (args.getItem() instanceof INode) {
            INode node = (INode) args.getItem();
            selection.clear();
            selection.setSelected(node, true);
            this.view.setCurrentItem(node);

            JPopupMenu popupMenu = (JPopupMenu) args.getMenu();

            JMenuItem editLabel = new JMenuItem(node.getLabels().first().equals("") ? "Add Label" : "Edit Label");
            editLabel.setIcon(new ImageIcon(getClass().getResource("/resources/star-16.png")));
            editLabel.addActionListener(evt -> {
                JTextField labelTextField = new JTextField(node.getLabels().first().getText());
                int result = JOptionPane.showOptionDialog(null, new Object[]{"Label: ", labelTextField}, (node.getLabels().first().equals("") ? "Add Label" : "Edit Label"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                if (result == JOptionPane.OK_OPTION) {
                    view.getGraph().setLabelText(node.getLabels().first(), labelTextField.getText());
                }
            });

            javax.swing.JMenuItem removeVertex = new javax.swing.JMenuItem("Delete");
            removeVertex.setIcon(new ImageIcon(getClass().getResource("/resources/delete-16.png")));
            removeVertex.addActionListener(evt -> {
                view.getGraph().remove(node);
                view.updateUI();
            });

            popupMenu.add(editLabel);
            popupMenu.add(removeVertex);
            args.setHandled(true);
        }
    }

    /*********************************************************************
     * Implementation of actions
     ********************************************************************/

    private void springEmbedderItemActionPerformed(ActionEvent evt) {
        JTextField iterationsTextField = new JTextField("1000");
        int iterations = 1000;

        int result = JOptionPane.showOptionDialog(null, new Object[]{"Number of Iterations: ", iterationsTextField}, "Algorithm Properties", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == JOptionPane.OK_OPTION) {
            try {
                iterations = Integer.parseInt(iterationsTextField.getText());
            } catch (NumberFormatException exc) {
                JOptionPane.showMessageDialog(null, "Incorrect input.\nThe number of iterations will be set to 5000.", "Incorrect Input", JOptionPane.ERROR_MESSAGE);
            }
        }

        ForceDirectedAlgorithm fd = new ForceDirectedAlgorithm(view, iterations) {
            public void calculateVectors() {
                ForceDirectedFactory.calculateSpringForcesEades(graph, 150, 100, 0.01, map);
                ForceDirectedFactory.calculateElectricForcesEades(graph, 50000, 0.01, map);
            }
        };
        fd.addAlgorithmListener(new AlgorithmListener() {
            public void algorithmStarted(AlgorithmEvent evt) {
            }

            public void algorithmFinished(AlgorithmEvent evt) {
                progressBar.setValue(0);
                view.fitContent();
                view.updateUI();
            }

            public void algorithmStateChanged(AlgorithmEvent evt) {
                progressBar.setValue(evt.currentStatus());
            }
        });
        this.thread = new Thread(fd);
        this.thread.start();
        this.view.updateUI();
    }

    private void organicItemActionPerformed(ActionEvent evt) {
        LayoutUtilities.morphLayout(this.view, new OrganicLayout(), Duration.ofSeconds(1), null);
    }

    private void circularItemActionPerformed(ActionEvent evt) {
        LayoutUtilities.morphLayout(this.view, new CircularLayout(), Duration.ofSeconds(1), null);
    }

    private void orthogonalItemActionPerformed(ActionEvent evt) {
        LayoutUtilities.morphLayout(this.view, new OrthogonalLayout(), Duration.ofSeconds(1), null);
    }

    private void treeItemActionPerformed(ActionEvent evt) {
        try {
            LayoutUtilities.morphLayout(this.view, new TreeLayout(), Duration.ofSeconds(1), null);
        }
        catch (Exception exc)
        {
            this.infoLabel.setText("The input graph is not a tree or a forest.");
        }
    }

    private void stNumberingMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        if (!GraphChecker.isBiconnected(adapter.getYGraph()))
        {
            infoLabel.setText("The input graph is not biconnected.");
            return;
        }
        NodeList stOrder = NodeOrders.st(adapter.getYGraph());
        for (INodeCursor nc = stOrder.nodes(); nc.ok(); nc.next()) {
            int st = stOrder.indexOf(nc.node()) + 1;
            INode original = adapter.getOriginalNode(nc.node());
            this.view.getGraph().setLabelText(original.getLabels().first(), new Integer(st).toString());
        }
    }

    private void maxDegreeMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        int maxDegree = 0;
        for (INodeCursor nc = adapter.getYGraph().getNodeCursor(); nc.ok(); nc.next()) {
            maxDegree = Math.max(maxDegree, nc.node().degree());
        }
        this.infoLabel.setText("The degree of the graph is " + maxDegree);
    }

    private void bipartitenessMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        this.infoLabel.setText("The input graph is " + (GraphChecker.isBipartite(adapter.getYGraph()) ? "" : " not") + " connected");
    }

    private void biconnectivityMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        this.infoLabel.setText("The input graph is " + (GraphChecker.isBiconnected(adapter.getYGraph()) ? "" : " not") + " biconnected");
    }

    private void connectivityMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        this.infoLabel.setText("The input graph is " + (GraphChecker.isConnected(adapter.getYGraph()) ? "" : " not") + " connected");
    }

    private void acyclicnessMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        this.infoLabel.setText("The input graph is " + (GraphChecker.isAcyclic(adapter.getYGraph()) ? "" : " not") + " acyclic");
    }

    private void planarityMenuActionPerformed(ActionEvent evt) {
        YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());
        this.infoLabel.setText("The input graph is " + (GraphChecker.isPlanar(adapter.getYGraph()) ? "" : " not") + " planar");
    }

    private void mirrorYItemActionPerformed(ActionEvent evt) {
        GraphTransformer gt = new GraphTransformer();
        gt.setOperation(OperationType.MIRROR_Y_AXIS);
        LayoutUtilities.morphLayout(this.view, gt, Duration.ofSeconds(1), null);
    }

    private void mirrorXItemActionPerformed(ActionEvent evt) {
        GraphTransformer gt = new GraphTransformer();
        gt.setOperation(OperationType.MIRROR_X_AXIS);
        LayoutUtilities.morphLayout(this.view, gt, Duration.ofSeconds(1), null);
    }

    private void rotateItemActionPerformed(ActionEvent evt) {
        JTextField rotateAngleTextField = new JTextField("90");
        int result = JOptionPane.showOptionDialog(null, new Object[]{"Rotation Angle: ", rotateAngleTextField}, "Rotation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (result == JOptionPane.OK_OPTION) {

            GraphTransformer gt = new GraphTransformer();
            try {
                gt.setOperation(OperationType.ROTATE);
                gt.setRotationAngle(Double.valueOf(rotateAngleTextField.getText()));
                LayoutUtilities.morphLayout(this.view, gt, Duration.ofSeconds(1), null);
            } catch (NumberFormatException exc) {
                this.infoLabel.setText("Wrong papameter passed as rotation angle.");
            }
        }
    }

    private void scaleItemActionPerformed(ActionEvent evt) {
        JTextField scaleFactorTextField = new JTextField("2");
        int result = JOptionPane.showOptionDialog(null, new Object[]{"Scale Factor: ", scaleFactorTextField}, "Scale", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (result == JOptionPane.OK_OPTION) {

            GraphTransformer gt = new GraphTransformer();
            try {
                gt.setOperation(OperationType.SCALE);
                gt.setScaleFactor(Double.valueOf(scaleFactorTextField.getText()));
                LayoutUtilities.morphLayout(this.view, gt, Duration.ofSeconds(1), null);
            } catch (NumberFormatException exc) {
                this.infoLabel.setText("Wrong papameter passed as scale factor.");
            }
        }
    }

    private void subdivideSelectedItemActionPerformed(ActionEvent evt) {
        ISelectionModel<IEdge> selection = this.view.getSelection().getSelectedEdges();
        List<IEdge> edgesToRemove = new ArrayList<IEdge>();

        for (IEdge edge : selection) {
            INode newNode = this.view.getGraph().createNode();

            this.view.getGraph().setNodeCenter(newNode, new PointD((edge.getSourceNode().getLayout().getCenter().x + edge.getTargetNode().getLayout().getCenter().x) / 2, (edge.getSourceNode().getLayout().getCenter().y + edge.getTargetNode().getLayout().getCenter().y) / 2));
            this.view.getGraph().createEdge(edge.getSourceNode(), newNode);
            this.view.getGraph().createEdge(edge.getTargetNode(), newNode);
            edgesToRemove.add(edge);
        }

        for (IEdge edge : edgesToRemove) {
            this.view.getGraph().remove(edge);
        }

        //Update the view.
        view.updateUI();
    }

    private void gridItemActionPerformed(ActionEvent evt) {
        if (this.isGridVisible)
        {
            this.isGridVisible = false;
            this.graphSnapContext.setGridSnapType(GridSnapTypes.NONE);
        }
        else
        {
            this.isGridVisible = true;
            this.graphSnapContext.setGridSnapType(GridSnapTypes.GRID_POINTS);
        }
        this.gridVisualCreator.setVisible(this.isGridVisible);
        this.view.updateUI();
    }

    private void stellateSelectedItemActionPerformed(ActionEvent evt) {
        ISelectionModel<INode> selection = this.view.getSelection().getSelectedNodes();

        if (selection.getCount() > 0)  //selected nodes present
        {
            INode base = view.getGraph().createNode();

            double x = 0;
            double y = 0;
            for (INode node : selection) {
                x += node.getLayout().getCenter().x;
                y += node.getLayout().getCenter().y;
                this.view.getGraph().createEdge(base, node);
            }
            this.view.getGraph().setNodeCenter(base, new PointD(x/selection.getCount(), y/selection.getCount()));
        }
    }

    private void mergeSelectedItemActionPerformed(ActionEvent evt) {
        ISelectionModel<INode> selection = this.view.getSelection().getSelectedNodes();
        List<INode> nodesToRemove = new ArrayList<INode>();

        if (selection.getCount() > 0)  //selected nodes present
        {
            INode base = null;

            for (INode node : selection)
            {
                if (base == null)
                {
                    base = node;
                }
                else
                {
                    nodesToRemove.add(node);
                }
                for (INode neighbor : this.view.getGraph().neighbors(INode.class, node))
                {
                    if (this.view.getGraph().getEdge(base, neighbor)!=null && this.view.getGraph().getEdge(neighbor, base)!=null) {
                        this.view.getGraph().createEdge(base, neighbor);
                    }
                }

            }
        }

        for (INode node : nodesToRemove) {
            this.view.getGraph().remove(node);
        }

        //Update the view.
        this.view.updateUI();
    }

    private void fitContentItemActionPerformed(ActionEvent evt) {
        this.view.fitGraphBounds();
    }

    private void zoomOutItemActionPerformed(ActionEvent evt) {
        this.view.setZoom(this.view.getZoom()-0.2);
    }

    private void zoomInItemActionPerformed(ActionEvent evt) {
        this.view.setZoom(this.view.getZoom()+0.2);
    }

    private void deselectAllItemActionPerformed(ActionEvent evt) {
        this.graphEditorInputMode.clearSelection();
    }

    private void selectAllItemActionPerformed(ActionEvent evt) {
        this.graphEditorInputMode.selectAll();
    }

    private void clearAllItemActionPerformed(ActionEvent evt) {
        this.view.getGraph().clear();
    }

    private void clearSelectedItemActionPerformed(ActionEvent evt) {
        if (this.graphEditorInputMode.isClearSelectionAllowed()) {
            this.graphEditorInputMode.clearSelection();
        }
    }

    private void pasteItemActionPerformed(ActionEvent evt) {
        this.graphEditorInputMode.paste();
    }

    private void copyItemActionPerformed(ActionEvent evt) {
        this.graphEditorInputMode.copy();
    }

    private void cutItemActionPerformed(ActionEvent evt) {
        this.graphEditorInputMode.cut();
    }

    private void redoItemActionPerformed(ActionEvent evt) {
        if (this.graphEditorInputMode.isUndoOperationsAllowed()) {
            this.graphEditorInputMode.redo();
        }
    }

    private void undoItemActionPerformed(ActionEvent evt) {
        if(this.graphEditorInputMode.isUndoOperationsAllowed()) {
            this.graphEditorInputMode.undo();
        }
    }

    private void blankGraphItemGraphItemActionPerformed(ActionEvent evt) {
        this.view.getGraph().clear();
        this.view.updateUI();
    }

    private void treeGraphItemActionPerformed(ActionEvent event) {
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(false);
        rgg.allowSelfLoops(false);

        JTextField nodeCount = new JTextField("10");

        int result = JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount}, "Tree Properties", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(nodeCount.getText()) - 1);
            } catch (java.lang.NumberFormatException exc) {
                JOptionPane.showMessageDialog(null, "Incorrect input.\nThe tree will be created with 10 nodes.", "Incorrect Input", JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(9);
            } finally {
                rgg.generate(this.view.getGraph());
                LayoutUtilities.applyLayout(view.getGraph(), this.defaultLayouter);
                this.view.fitGraphBounds();
                this.view.updateUI();
            }
        }
    }

    private void connectedGraphItemActionPerformed(ActionEvent evt) {
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(true);
        rgg.allowSelfLoops(false);

        JTextField nodeCount = new JTextField();
        JTextField edgeCount = new JTextField();

        int result = JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount, "Number of Edges (may be more to achive connectivity): ", edgeCount}, "Graph Properties", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(edgeCount.getText()));
            } catch (java.lang.NumberFormatException exc) {
                JOptionPane.showMessageDialog(null, "Incorrect input.\nThe graph will be created with 10 nodes and 10 edges.", "Incorrect Input", JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(10);
            } finally {
                rgg.generate(this.view.getGraph());

                YGraphAdapter adapter = new YGraphAdapter(this.view.getGraph());

                EdgeList edgeList = GraphConnectivity.makeConnected(adapter.getYGraph());
                for (IEdgeCursor ec = edgeList.edges(); ec.ok(); ec.next())
                {
                    this.view.getGraph().createEdge(adapter.getOriginalNode(ec.edge().source()), adapter.getOriginalNode(ec.edge().target()));
                }

                LayoutUtilities.applyLayout(view.getGraph(), this.defaultLayouter);
                this.view.fitGraphBounds();
                this.view.updateUI();
            }
        }
    }

    private void randomGraphItemActionPerformed(ActionEvent evt) {
        util.RandomGraphGenerator rgg = new util.RandomGraphGenerator();
        rgg.allowMultipleEdges(false);
        rgg.allowCycles(true);
        rgg.allowSelfLoops(false);

        JTextField nodeCount = new JTextField();
        JTextField edgeCount = new JTextField();

        int result = JOptionPane.showOptionDialog(null, new Object[]{"Number of Nodes: ", nodeCount, "Number of Edges: ", edgeCount}, "Graph Properties", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

        if (result == JOptionPane.OK_OPTION) {
            try {
                rgg.setNodeCount(Integer.parseInt(nodeCount.getText()));
                rgg.setEdgeCount(Integer.parseInt(edgeCount.getText()));
            } catch (NumberFormatException exc) {
                JOptionPane.showMessageDialog(null, "Incorrect input.\nThe graph will be created with 10 nodes and 10 edges.", "Incorrect Input", JOptionPane.ERROR_MESSAGE);
                rgg.setNodeCount(10);
                rgg.setEdgeCount(10);
            } finally {
                rgg.generate(view.getGraph());
                LayoutUtilities.applyLayout(view.getGraph(), this.defaultLayouter);
                this.view.fitGraphBounds();
                this.view.updateUI();
            }
        }
    }

    private void openItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(this.fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("graphml"));
            }

            public String getDescription() {
                return "GraphML Files [.graphml]";
            }

        });

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.fileNamePath = chooser.getSelectedFile().toString();

            try {
                this.view.importFromGraphML(fileNamePath);
                this.view.fitGraphBounds();
                this.view.updateUI();
                this.fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured while reading the input file.");
            }
        }
    }

    private void reloadItemActionPerformed(ActionEvent evt) {
        if (this.fileNamePath != null)
        {
            try {
                this.view.getGraph().clear();
                this.view.importFromGraphML(this.fileNamePath);
                this.view.fitGraphBounds();
                this.view.updateUI();
            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured while reading the input file.");
            }
        } else {
            infoLabel.setText("No file was recently opened.");
        }
    }

    private void saveItemActionPerformed(ActionEvent evt) {
        if (fileNamePath != null)
        {
            try {
                this.view.exportToGraphML(fileNamePath);
            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured while exporting the graph.");
            }
        } else {
            JFileChooser chooser = new JFileChooser(fileNamePath);
            chooser.setFileFilter(new FileFilter() {
                public boolean accept(File file) {
                    return (file.isDirectory() || file.toString().toLowerCase().endsWith(".graphml"));
                }

                public String getDescription() {
                    return "GraphML Files [.graphml]";
                }

            });
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                fileNamePath = chooser.getSelectedFile().toString();
                if (!fileNamePath.toLowerCase().endsWith(".graphml")) {
                    fileNamePath = fileNamePath + ".graphml";
                }
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

                try {
                    this.view.exportToGraphML(fileNamePath);
                } catch (IOException ioe) {
                    this.infoLabel.setText("An error occured while exporting the graph.");
                }
            }
        }
    }

    private void saveAsItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".graphml"));
            }

            public String getDescription() {
                return "GraphML Files [.graphml]";
            }

        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            fileNamePath = chooser.getSelectedFile().toString();

            if (!fileNamePath.toLowerCase().endsWith(".graphml")) {
                fileNamePath = fileNamePath + ".graphml";
            }
            fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            try {
                this.view.exportToGraphML(fileNamePath);
            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured while exporting the graph.");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // check for 'os.name == Windows 7' does not work, since JDK 1.4 uses the compatibility mode
            if (!"com.sun.java.swing.plaf.motif.MotifLookAndFeel".equals(UIManager.getSystemLookAndFeelClassName()) && !"com.sun.java.swing.plaf.gtk.GTKLookAndFeel".equals(UIManager.getSystemLookAndFeelClassName()) && !UIManager.getSystemLookAndFeelClassName().equals(UIManager.getLookAndFeel().getClass().getName()) && !(System.getProperty("java.version").startsWith("1.4") && System.getProperty("os.name").startsWith("Windows") && "6.1".equals(System.getProperty("os.version")))) {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private void jpgItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".jpg"));
            }

            public String getDescription() {
                return "JPG Files [.jpg]";
            }

        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".jpg")) {
                fileName = fileName + ".jpg";
            }
            ContextConfigurator configuration = new ContextConfigurator(this.view.getContentRect());
            PixelImageExporter exporter = new PixelImageExporter(configuration);

            try {
                FileOutputStream stream = new FileOutputStream(fileName);
                exporter.export(this.view, stream, "jpg");
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured which exporting the graph.");
            }
        }
    }

    private void gifItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".gif"));
            }

            public String getDescription() {
                return "GIF Files [.gif]";
            }

        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".gif")) {
                fileName = fileName + ".gif";
            }
            ContextConfigurator configuration = new ContextConfigurator(this.view.getContentRect());
            PixelImageExporter exporter = new PixelImageExporter(configuration);

            try {
                FileOutputStream stream = new FileOutputStream(fileName);
                exporter.export(this.view, stream, "gif");
                fileNamePathFolder = chooser.getSelectedFile().getParent().toString();
            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured which exporting the graph.");
            }
        }
    }

    private void christianFormatItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".amf"));
            }

            public String getDescription() {
                return "AF Files [.amf]";
            }

        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".amf")) {
                fileName = fileName + ".amf";
            }
            try {
                new ChristianIOHandler().write(new YGraphAdapter(view.getGraph()).getYGraph(), fileName);
            }
            catch (IOException exc)
            {
                this.infoLabel.setText("An error occured which exporting the graph.");
            }
        }
    }

    private void sergeyFormatItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith(".edges"));
            }

            public String getDescription() {
                return "Edges Files [.edges]";
            }

        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = chooser.getSelectedFile().toString();
            if (!fileName.toLowerCase().endsWith(".edges")) {
                fileName = fileName + ".edges";
            }
            try {
                new SergeyIOHandler().write(new YGraphAdapter(view.getGraph()).getYGraph(), fileName);
            }
            catch (IOException exc)
            {
                this.infoLabel.setText("An error occured which exporting the graph.");
            }
        }
    }

    private void christianImportFormatItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("amf"));
            }

            public String getDescription() {
                return "AMF Files [.amf]";
            }

        });
        if (chooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            fileNamePath = chooser.getSelectedFile().toString();
            fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            ChristianIOHandler ioh = new ChristianIOHandler();

            try {
                view.getGraph().clear();

                Graph g = ioh.read(fileNamePath);
                INodeMap map = g.createNodeMap();

                for (INodeCursor nc = g.getNodeCursor(); nc.ok(); nc.next())
                {
                    map.set(nc.node(), view.getGraph().createNode());
                }
                for (IEdgeCursor ec = g.getEdgeCursor(); ec.ok(); ec.next())
                {
                    view.getGraph().createEdge((INode) map.get(ec.edge().target()), (INode) map.get(ec.edge().source()));
                }
                g.disposeNodeMap(map);

                LayoutUtilities.applyLayout(view.getGraph(), this.defaultLayouter);
                this.view.fitGraphBounds();
                this.view.updateUI();

            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured which importing the graph.");
            }
        }
    }

    private void sergeyImportFormatItemActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser(fileNamePathFolder);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return (file.isDirectory() || file.toString().toLowerCase().endsWith("edges"));
            }

            public String getDescription() {
                return "Edges Files [.edges]";
            }

        });
        if (chooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            fileNamePath = chooser.getSelectedFile().toString();
            fileNamePathFolder = chooser.getSelectedFile().getParent().toString();

            SergeyIOHandler ioh = new SergeyIOHandler();

            try {
                view.getGraph().clear();

                Graph g = ioh.read(fileNamePath);
                INodeMap map = g.createNodeMap();

                for (INodeCursor nc = g.getNodeCursor(); nc.ok(); nc.next())
                {
                    map.set(nc.node(), view.getGraph().createNode());
                }
                for (IEdgeCursor ec = g.getEdgeCursor(); ec.ok(); ec.next())
                {
                    view.getGraph().createEdge((INode) map.get(ec.edge().target()), (INode) map.get(ec.edge().source()));
                }
                g.disposeNodeMap(map);

                LayoutUtilities.applyLayout(view.getGraph(), this.defaultLayouter);
                this.view.fitGraphBounds();
                this.view.updateUI();

            } catch (IOException ioe) {
                this.infoLabel.setText("An error occured which importing the graph.");
            }
        }
    }


    private void printItemActionPerformed(ActionEvent evt) {
        CanvasPrintable printable = new CanvasPrintable(this.view);
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(printable);
        if (job.printDialog())
        {
            try {
                job.print();
            } catch (PrinterException e) {
                this.infoLabel.setText("The graph cannot be printed.");
            }
        }
    }

    /*********************************************************************
     * Additional GUI-related Fields
     ********************************************************************/

    private JPanel mainPanel;
    private JPanel progressBarPanel;
    private JLabel infoLabel;
    private JProgressBar progressBar;
    private JMenuBar mainMenuBar;
    private JMenu fileMenu;
    private JMenuItem newMenuItem;
    private JMenuItem blankGraphItem;
    private JMenuItem treeGraphItem;
    private JMenuItem connectedGraphItem;
    private JMenuItem randomGraphItem;
    private JMenuItem openItem;
    private JMenuItem reloadItem;
    private JMenuItem saveItem;
    private JMenuItem saveAsItem;
    private JMenu exportMenu;
    private JMenu importMenu;
    private JMenuItem jpgItem;
    private JMenuItem gifItem;
    private JMenuItem christianFormatItem;
    private JMenuItem sergeyFormatItem;
    private JMenuItem christianImportFormatItem;
    private JMenuItem sergeyImportFormatItem;
    private JMenuItem printItem;
    private JMenuItem quitItem;
    private JMenu editMenu;
    private JMenuItem undoItem;
    private JMenuItem redoItem;
    private JMenuItem cutItem;
    private JMenuItem copyItem;
    private JMenuItem pasteItem;
    private JMenuItem clearSelectedItem;
    private JMenuItem clearAllItem;
    private JMenuItem selectAllItem;
    private JMenuItem deselectAllItem;
    private JMenu viewMenu;
    private JMenuItem zoomInItem;
    private JMenuItem zoomOutItem;
    private JMenuItem fitContentItem;
    private JMenu toolsMenu;
    private JMenuItem mergeSelectedItem;
    private JMenuItem stellateSelectedItem;
    private JMenuItem gridItem;
    private JMenuItem subdivideSelectedItem;
    private JMenu geometricTranformationsMenu;
    private JMenuItem scaleItem;
    private JMenuItem rotateItem;
    private JMenuItem mirrorXItem;
    private JMenuItem mirrorYItem;
    private JMenu analyzeMenu;
    private JMenuItem planarityMenu;
    private JMenuItem acyclicnessMenu;
    private JMenuItem connectivityMenu;
    private JMenuItem biconnectivityMenu;
    private JMenuItem maxDegreeMenu;
    private JMenuItem bipartitenessMenu;
    private JMenuItem stNumberingMenu;

    private JMenu layoutMenu;
    private JMenuItem orthogonalItem;
    private JMenuItem circularItem;
    private JMenuItem treeItem;
    private JMenuItem organicItem;
    private JMenuItem springEmbedderItem;

}
